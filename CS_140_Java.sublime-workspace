{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"row",
				"row"
			],
			[
				"int",
				"int"
			],
			[
				"i",
				"i"
			]
		]
	},
	"buffers":
	[
		{
			"file": "assignments/week8/assignment_3/DMCalendarP3.java",
			"settings":
			{
				"buffer_size": 11555,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*\n    Copyright 2021 <Dustin McClure>\n    Project Name: CS140_Java\n    Sub-project: Lab 6\n    File Name: DMDNAjava\n    Author: Dustin McClure\n    Lab: DNA\n    Modified Date: 06/07/2021\n*/\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.text.*;\n\npublic class DMDNA\n{\n    public static void main(String[] args) throws FileNotFoundException\n    {\n\n    }\n\n    public static String[] intorduction() throws FileNotFoundException\n    {\n        String[] ioName = new String[2];\n        System.out.println(\"This program reports information about DNA\");\n        System.out.pringln(\"nucleotide sequences that may encode\");\n        System.out.println(\"proteins.\");\n        System.out.println(\"Input file name?\");\n        Scanner input = new Scanner(System.in);\n        ioName[0] = input.next();\n\n        System.out.println(\"What would you like to call your output file?\");\n        ioName[1] = input.next();\n\n        return ioName;\n    }\n\n    public static void name(String name, PrintStream out)\n    { \n        out.println(\"Region Name: \" + name);\n    }\n\n    public static String sequence(String sequenceDNA, PrintStream out)\n    {\n        sequenceDNA = sequenceDNA.toUpperCase();\n        out.println(\"Nucleotides: \" + sequenceDNA);\n        return sequenceDNA; \n    }\n\n    public static int[] nuc_Count(String sequenceDNA, PrintStream out) throws FileNotFoundException\n    {\n        int[] counts = new int[UN + 1]; \n        char[] codons = {'A', 'C', 'G', 'T', '-'};\n        for(int i = 0; i < sequenceDNA.length(); i++) {\n            char c = sequenceDNA.charAt(i);\n            for(int j = 0; j < codons.length; j++) {\n                if(c == codons[j]) {\n                    counts[j]++;\n                }\n            }\n        }\n        int[] counts_Short = Arrays.copyOf(counts, 4); \n        out.println(\"Nuc. Counts: \" + Arrays.toString(counts_Short));\n        return counts;\n    }\n\n    public static double[] masses(int[] nuc_Count, PrintStream out) throws FileNotFoundException\n    {\n    double[] masses_Constant = {135.128, 111.103, 151.128, 125.107, 100.000};\n    double[] masses_Nuc = new double[5];\n    double totalMass = 0;\n    for(int i = 0; i < 5; i++) { \n            masses_Nuc[i] = nuc_Count[i] * masses_Constant[i];\n            totalMass += masses_Nuc[i];\n        }       \n        \n        double[] percentages = convert_Percentage(masses_Nuc, totalMass); \n        double[] percentages2 = Arrays.copyOf(percentages, 4); \n        out.print(\"Total Mass%: \" + Arrays.toString(percentages2) + \" of \");\n        out.printf(\"%.1f\", totalMass);\n        out.println();\n        return percentages; \n    }\n\n    public static double[] convert_Percentage(double[] masses_Nuc, double totalMass) throws FileNotFoundException\n    {\n        double[] percentages = new double[5];\n        for(int i = 0; i <=4; i++) {\n            percentages[i] = Math.round((masses_Nuc[i] / totalMass * 100) * 10.0) / 10.0;\n        }\n        return percentages; \n    }\n\n    public static String groupCodons(String sequenceDNA, PrintStream out) throws FileNotFoundException\n    {\n        String sequenceDNA2 = sequenceDNA.replace(\"-\",\"\");\n        int length = sequenceDNA2.length() / NPC;\n        String[] codons = new String[length];\n        int j = 1; \n        for(int i = 0; i <= sequenceDNA2.length() - NPC; i = i + NPC) {\n            String codon = sequenceDNA2.substring(i, NPC * j);\n            codons[j - 1] = codon;\n            j++;       \n      } \n        String codonList = Arrays.toString(codons);\n        out.println(\"Codons List: \" + codonList);\n        return codonList; \n    }\n\n    public static void proteinTest(String codonList, double[] percentages, PrintStream out)\n    {\n        if (startTest(codonList) && stopTest(codonList) && mNCTest(codonList) && percentageTest(percentages)) { \n                out.println(\"Is Protein?: YES\");\n        } else {\n            out.println(\"Is Protein?: NO\");\n        }\n        out.println(); \n    }\n\n    public static boolean startTest(String codonList)\n    {\n        return(codonList.substring(1, 4).equals(\"ATG\"));\n    }\n\n    public static boolean stopTest(String codonList)\n    {\n        String EndC  = codonList.substring(codonList.length() - 4, codonList.length() - 1);\n      return (EndC.equals(\"TAA\") || EndC.equals(\"TAG\") || EndC.equals(\"TGA\"));\n    }\n    \n    public static boolean mNCTest(String codonList)\n    {\n        return(codonList.charAt(19) == ',');\n    }\n    \n    public static boolean percentageTest(double[] percentages)\n    {\n        return(percentages[1] + percentages[2] >= 30.0);\n    }\n}\n",
			"file": "assignments/week8/lab_6/DMDNA.java",
			"file_size": 4604,
			"file_write_time": 132678562905321413,
			"settings":
			{
				"buffer_size": 4561,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					17,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEsBAAAAAAAATAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLAQAAAAAAAEsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"paste",
					null,
					"AQAAAEwBAAAAAAAAaAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMAQAAAAAAAEwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAAHUBAAAAAAAAdQEAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2AQAAAAAAAHYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHUBAAAAAAAAdgEAAAAAAAAAAAAAdgEAAAAAAAB6AQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1AQAAAAAAAHUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAHoBAAAAAAAAewEAAAAAAAAAAAAAewEAAAAAAAB/AQAAAAAAAAAAAAB2AQAAAAAAAHYBAAAAAAAABAAAACAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6AQAAAAAAAHoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "public"
					},
					"BgAAAHsBAAAAAAAAfAEAAAAAAAAAAAAAfAEAAAAAAAB9AQAAAAAAAAAAAAB9AQAAAAAAAH4BAAAAAAAAAAAAAH4BAAAAAAAAfwEAAAAAAAAAAAAAfwEAAAAAAACAAQAAAAAAAAAAAACAAQAAAAAAAIEBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7AQAAAAAAAHsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " static"
					},
					"BwAAAIEBAAAAAAAAggEAAAAAAAAAAAAAggEAAAAAAACDAQAAAAAAAAAAAACDAQAAAAAAAIQBAAAAAAAAAAAAAIQBAAAAAAAAhQEAAAAAAAAAAAAAhQEAAAAAAACGAQAAAAAAAAAAAACGAQAAAAAAAIcBAAAAAAAAAAAAAIcBAAAAAAAAiAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBAQAAAAAAAIEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " void"
					},
					"BQAAAIgBAAAAAAAAiQEAAAAAAAAAAAAAiQEAAAAAAACKAQAAAAAAAAAAAACKAQAAAAAAAIsBAAAAAAAAAAAAAIsBAAAAAAAAjAEAAAAAAAAAAAAAjAEAAAAAAACNAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIAQAAAAAAAIgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " intorduction"
					},
					"DQAAAI0BAAAAAAAAjgEAAAAAAAAAAAAAjgEAAAAAAACPAQAAAAAAAAAAAACPAQAAAAAAAJABAAAAAAAAAAAAAJABAAAAAAAAkQEAAAAAAAAAAAAAkQEAAAAAAACSAQAAAAAAAAAAAACSAQAAAAAAAJMBAAAAAAAAAAAAAJMBAAAAAAAAlAEAAAAAAAAAAAAAlAEAAAAAAACVAQAAAAAAAAAAAACVAQAAAAAAAJYBAAAAAAAAAAAAAJYBAAAAAAAAlwEAAAAAAAAAAAAAlwEAAAAAAACYAQAAAAAAAAAAAACYAQAAAAAAAJkBAAAAAAAAAAAAAJkBAAAAAAAAmgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNAQAAAAAAAI0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJoBAAAAAAAAnAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaAQAAAAAAAJoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJwBAAAAAAAAnQEAAAAAAAAAAAAAnQEAAAAAAAChAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcAQAAAAAAAJwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKEBAAAAAAAAowEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAQAAAAAAAKEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAKIBAAAAAAAAowEAAAAAAAAAAAAAowEAAAAAAACnAQAAAAAAAAAAAACnAQAAAAAAAKgBAAAAAAAAAAAAAKgBAAAAAAAArAEAAAAAAAAAAAAAowEAAAAAAACjAQAAAAAAAAQAAAAgICAgowEAAAAAAACrAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiAQAAAAAAAKIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"paste",
					null,
					"AQAAAKsBAAAAAAAAFQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrAQAAAAAAAKsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"left_delete",
					null,
					"AQAAANUBAAAAAAAA1QEAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWAQAAAAAAANYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAANUBAAAAAAAA1gEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVAQAAAAAAANUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"left_delete",
					null,
					"AQAAANUBAAAAAAAA1QEAAAAAAAABAAAAXA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWAQAAAAAAANYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANUBAAAAAAAA1gEAAAAAAAAAAAAA1gEAAAAAAADeAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVAQAAAAAAANUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"left_delete",
					null,
					"AQAAAAICAAAAAAAAAgIAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADAgAAAAAAAAMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAICAAAAAAAAAwIAAAAAAAAAAAAAAwIAAAAAAAALAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACAgAAAAAAAAICAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAKsBAAAAAAAArAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrAQAAAAAAAKsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAKwBAAAAAAAArQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsAQAAAAAAAKwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "stem.out.println"
					},
					"EAAAAK0BAAAAAAAArgEAAAAAAAAAAAAArgEAAAAAAACvAQAAAAAAAAAAAACvAQAAAAAAALABAAAAAAAAAAAAALABAAAAAAAAsQEAAAAAAAAAAAAAsQEAAAAAAACyAQAAAAAAAAAAAACyAQAAAAAAALMBAAAAAAAAAAAAALMBAAAAAAAAtAEAAAAAAAAAAAAAtAEAAAAAAAC1AQAAAAAAAAAAAAC1AQAAAAAAALYBAAAAAAAAAAAAALYBAAAAAAAAtwEAAAAAAAAAAAAAtwEAAAAAAAC4AQAAAAAAAAAAAAC4AQAAAAAAALkBAAAAAAAAAAAAALkBAAAAAAAAugEAAAAAAAAAAAAAugEAAAAAAAC7AQAAAAAAAAAAAAC7AQAAAAAAALwBAAAAAAAAAAAAALwBAAAAAAAAvQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtAQAAAAAAAK0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "(\""
					},
					"AgAAAL0BAAAAAAAAvgEAAAAAAAAAAAAAvgEAAAAAAAC/AQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9AQAAAAAAAL0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAOkBAAAAAAAA6gEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpAQAAAAAAAOkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAOoBAAAAAAAA6wEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqAQAAAAAAAOoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOsBAAAAAAAA7AEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrAQAAAAAAAOsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "System.out."
					},
					"CwAAAPUBAAAAAAAA9gEAAAAAAAAAAAAA9gEAAAAAAAD3AQAAAAAAAAAAAAD3AQAAAAAAAPgBAAAAAAAAAAAAAPgBAAAAAAAA+QEAAAAAAAAAAAAA+QEAAAAAAAD6AQAAAAAAAAAAAAD6AQAAAAAAAPsBAAAAAAAAAAAAAPsBAAAAAAAA/AEAAAAAAAAAAAAA/AEAAAAAAAD9AQAAAAAAAAAAAAD9AQAAAAAAAP4BAAAAAAAAAAAAAP4BAAAAAAAA/wEAAAAAAAAAAAAA/wEAAAAAAAAAAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1AQAAAAAAAPUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "pringln(*"
					},
					"CQAAAAACAAAAAAAAAQIAAAAAAAAAAAAAAQIAAAAAAAACAgAAAAAAAAAAAAACAgAAAAAAAAMCAAAAAAAAAAAAAAMCAAAAAAAABAIAAAAAAAAAAAAABAIAAAAAAAAFAgAAAAAAAAAAAAAFAgAAAAAAAAYCAAAAAAAAAAAAAAYCAAAAAAAABwIAAAAAAAAAAAAABwIAAAAAAAAIAgAAAAAAAAAAAAAIAgAAAAAAAAkCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAA8L8"
				],
				[
					113,
					1,
					"left_delete",
					null,
					"AQAAAAgCAAAAAAAACAIAAAAAAAABAAAAKg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJAgAAAAAAAAkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAAgCAAAAAAAACQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAgAAAAAAAAgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAC0CAAAAAAAALgIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtAgAAAAAAAC0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAC4CAAAAAAAALwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuAgAAAAAAAC4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAC8CAAAAAAAAMAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvAgAAAAAAAC8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAADkCAAAAAAAAOgIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5AgAAAAAAADkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "ystem.out."
					},
					"CgAAADoCAAAAAAAAOwIAAAAAAAAAAAAAOwIAAAAAAAA8AgAAAAAAAAAAAAA8AgAAAAAAAD0CAAAAAAAAAAAAAD0CAAAAAAAAPgIAAAAAAAAAAAAAPgIAAAAAAAA/AgAAAAAAAAAAAAA/AgAAAAAAAEACAAAAAAAAAAAAAEACAAAAAAAAQQIAAAAAAAAAAAAAQQIAAAAAAABCAgAAAAAAAAAAAABCAgAAAAAAAEMCAAAAAAAAAAAAAEMCAAAAAAAARAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6AgAAAAAAADoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "pring"
					},
					"BQAAAEQCAAAAAAAARQIAAAAAAAAAAAAARQIAAAAAAABGAgAAAAAAAAAAAABGAgAAAAAAAEcCAAAAAAAAAAAAAEcCAAAAAAAASAIAAAAAAAAAAAAASAIAAAAAAABJAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEAgAAAAAAAEQCAAAAAAAAAAAAAAAA8L8"
				],
				[
					131,
					1,
					"left_delete",
					null,
					"AQAAAEgCAAAAAAAASAIAAAAAAAABAAAAZw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJAgAAAAAAAEkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "tln(\""
					},
					"BQAAAEgCAAAAAAAASQIAAAAAAAAAAAAASQIAAAAAAABKAgAAAAAAAAAAAABKAgAAAAAAAEsCAAAAAAAAAAAAAEsCAAAAAAAATAIAAAAAAAAAAAAATAIAAAAAAABNAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIAgAAAAAAAEgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAFYCAAAAAAAAVwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWAgAAAAAAAFYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAFcCAAAAAAAAWAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXAgAAAAAAAFcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFgCAAAAAAAAWQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYAgAAAAAAAFgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					147,
					1,
					"left_delete",
					null,
					"AQAAAFkCAAAAAAAAWQIAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaAgAAAAAAAFoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFkCAAAAAAAAWgIAAAAAAAAAAAAAWgIAAAAAAABiAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZAgAAAAAAAFkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAGICAAAAAAAAYwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiAgAAAAAAAGICAAAAAAAAAAAAAAAA8L8"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "ystem.out.prin"
					},
					"DgAAAGMCAAAAAAAAZAIAAAAAAAAAAAAAZAIAAAAAAABlAgAAAAAAAAAAAABlAgAAAAAAAGYCAAAAAAAAAAAAAGYCAAAAAAAAZwIAAAAAAAAAAAAAZwIAAAAAAABoAgAAAAAAAAAAAABoAgAAAAAAAGkCAAAAAAAAAAAAAGkCAAAAAAAAagIAAAAAAAAAAAAAagIAAAAAAABrAgAAAAAAAAAAAABrAgAAAAAAAGwCAAAAAAAAAAAAAGwCAAAAAAAAbQIAAAAAAAAAAAAAbQIAAAAAAABuAgAAAAAAAAAAAABuAgAAAAAAAG8CAAAAAAAAAAAAAG8CAAAAAAAAcAIAAAAAAAAAAAAAcAIAAAAAAABxAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjAgAAAAAAAGMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "tln(\""
					},
					"BQAAAHECAAAAAAAAcgIAAAAAAAAAAAAAcgIAAAAAAABzAgAAAAAAAAAAAABzAgAAAAAAAHQCAAAAAAAAAAAAAHQCAAAAAAAAdQIAAAAAAAAAAAAAdQIAAAAAAAB2AgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxAgAAAAAAAHECAAAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAIYCAAAAAAAAhwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGAgAAAAAAAIYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAIcCAAAAAAAAiAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHAgAAAAAAAIcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIgCAAAAAAAAiQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIAgAAAAAAAIgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AgAAAIkBAAAAAAAAigEAAAAAAAAAAAAAigEAAAAAAACKAQAAAAAAAAQAAAB2b2lk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJAQAAAAAAAI0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "tring"
					},
					"BQAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAACMAQAAAAAAAI0BAAAAAAAAAAAAAI0BAAAAAAAAjgEAAAAAAAAAAAAAjgEAAAAAAACPAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAQAAAAAAAIoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ4BAAAAAAAAnwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeAQAAAAAAAJ4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJ8BAAAAAAAAoQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfAQAAAAAAAJ8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					2,
					"left_delete",
					null,
					"AgAAAKABAAAAAAAAoAEAAAAAAAABAAAAfZ8BAAAAAAAAnwEAAAAAAAABAAAAew",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAQAAAAAAAKEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": "throw"
					},
					"BQAAAJ8BAAAAAAAAoAEAAAAAAAAAAAAAoAEAAAAAAAChAQAAAAAAAAAAAAChAQAAAAAAAKIBAAAAAAAAAAAAAKIBAAAAAAAAowEAAAAAAAAAAAAAowEAAAAAAACkAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfAQAAAAAAAJ8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAKQBAAAAAAAApQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkAQAAAAAAAKQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": " FileNo"
					},
					"BwAAAKUBAAAAAAAApgEAAAAAAAAAAAAApgEAAAAAAACnAQAAAAAAAAAAAACnAQAAAAAAAKgBAAAAAAAAAAAAAKgBAAAAAAAAqQEAAAAAAAAAAAAAqQEAAAAAAACqAQAAAAAAAAAAAACqAQAAAAAAAKsBAAAAAAAAAAAAAKsBAAAAAAAArAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClAQAAAAAAAKUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					185,
					1,
					"insert_completion",
					{
						"completion": "FileNotFoundException",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "FileNotFoundException"
					},
					"AgAAAKYBAAAAAAAApgEAAAAAAAAGAAAARmlsZU5vpgEAAAAAAAC7AQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsAQAAAAAAAKwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKgCAAAAAAAAqQIAAAAAAAAAAAAAqQIAAAAAAACxAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoAgAAAAAAAKgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAALECAAAAAAAAsgIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxAgAAAAAAALECAAAAAAAAAAAAAAAA8L8"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "canner"
					},
					"BgAAALICAAAAAAAAswIAAAAAAAAAAAAAswIAAAAAAAC0AgAAAAAAAAAAAAC0AgAAAAAAALUCAAAAAAAAAAAAALUCAAAAAAAAtgIAAAAAAAAAAAAAtgIAAAAAAAC3AgAAAAAAAAAAAAC3AgAAAAAAALgCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAgAAAAAAALICAAAAAAAAAAAAAAAA8L8"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALgCAAAAAAAAuQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AgAAAAAAALgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAALkCAAAAAAAAugIAAAAAAAAAAAAAugIAAAAAAAC7AgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5AgAAAAAAALkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					2,
					"left_delete",
					null,
					"AgAAALoCAAAAAAAAugIAAAAAAAABAAAAbrkCAAAAAAAAuQIAAAAAAAABAAAAaQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7AgAAAAAAALsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": "conso"
					},
					"BQAAALkCAAAAAAAAugIAAAAAAAAAAAAAugIAAAAAAAC7AgAAAAAAAAAAAAC7AgAAAAAAALwCAAAAAAAAAAAAALwCAAAAAAAAvQIAAAAAAAAAAAAAvQIAAAAAAAC+AgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5AgAAAAAAALkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					205,
					5,
					"left_delete",
					null,
					"BQAAAL0CAAAAAAAAvQIAAAAAAAABAAAAb7wCAAAAAAAAvAIAAAAAAAABAAAAc7sCAAAAAAAAuwIAAAAAAAABAAAAbroCAAAAAAAAugIAAAAAAAABAAAAb7kCAAAAAAAAuQIAAAAAAAABAAAAYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+AgAAAAAAAL4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "input"
					},
					"BQAAALkCAAAAAAAAugIAAAAAAAAAAAAAugIAAAAAAAC7AgAAAAAAAAAAAAC7AgAAAAAAALwCAAAAAAAAAAAAALwCAAAAAAAAvQIAAAAAAAAAAAAAvQIAAAAAAAC+AgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5AgAAAAAAALkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAL4CAAAAAAAAvwIAAAAAAAAAAAAAvwIAAAAAAADAAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+AgAAAAAAAL4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAAMACAAAAAAAAwQIAAAAAAAAAAAAAwQIAAAAAAADCAgAAAAAAAAAAAADCAgAAAAAAAMMCAAAAAAAAAAAAAMMCAAAAAAAAxAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAAgAAAAAAAMACAAAAAAAAAAAAAAAA8L8"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": " Scanner"
					},
					"CAAAAMQCAAAAAAAAxQIAAAAAAAAAAAAAxQIAAAAAAADGAgAAAAAAAAAAAADGAgAAAAAAAMcCAAAAAAAAAAAAAMcCAAAAAAAAyAIAAAAAAAAAAAAAyAIAAAAAAADJAgAAAAAAAAAAAADJAgAAAAAAAMoCAAAAAAAAAAAAAMoCAAAAAAAAywIAAAAAAAAAAAAAywIAAAAAAADMAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEAgAAAAAAAMQCAAAAAAAAAAAAAAAA8L8"
				],
				[
					210,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMwCAAAAAAAAzgIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMAgAAAAAAAMwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": "System.in"
					},
					"CQAAAM0CAAAAAAAAzgIAAAAAAAAAAAAAzgIAAAAAAADPAgAAAAAAAAAAAADPAgAAAAAAANACAAAAAAAAAAAAANACAAAAAAAA0QIAAAAAAAAAAAAA0QIAAAAAAADSAgAAAAAAAAAAAADSAgAAAAAAANMCAAAAAAAAAAAAANMCAAAAAAAA1AIAAAAAAAAAAAAA1AIAAAAAAADVAgAAAAAAAAAAAADVAgAAAAAAANYCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNAgAAAAAAAM0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANcCAAAAAAAA2AIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXAgAAAAAAANcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANgCAAAAAAAA2QIAAAAAAAAAAAAA2QIAAAAAAADhAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYAgAAAAAAANgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "String"
					},
					"BgAAAOECAAAAAAAA4gIAAAAAAAAAAAAA4gIAAAAAAADjAgAAAAAAAAAAAADjAgAAAAAAAOQCAAAAAAAAAAAAAOQCAAAAAAAA5QIAAAAAAAAAAAAA5QIAAAAAAADmAgAAAAAAAAAAAADmAgAAAAAAAOcCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhAgAAAAAAAOECAAAAAAAAAAAAAAAA8L8"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOcCAAAAAAAA6AIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnAgAAAAAAAOcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAOgCAAAAAAAA6QIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoAgAAAAAAAOgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "Name"
					},
					"BAAAAOkCAAAAAAAA6gIAAAAAAAAAAAAA6gIAAAAAAADrAgAAAAAAAAAAAADrAgAAAAAAAOwCAAAAAAAAAAAAAOwCAAAAAAAA7QIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpAgAAAAAAAOkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAO0CAAAAAAAA7gIAAAAAAAAAAAAA7gIAAAAAAADvAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtAgAAAAAAAO0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO8CAAAAAAAA8AIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvAgAAAAAAAO8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "input.n"
					},
					"BwAAAPACAAAAAAAA8QIAAAAAAAAAAAAA8QIAAAAAAADyAgAAAAAAAAAAAADyAgAAAAAAAPMCAAAAAAAAAAAAAPMCAAAAAAAA9AIAAAAAAAAAAAAA9AIAAAAAAAD1AgAAAAAAAAAAAAD1AgAAAAAAAPYCAAAAAAAAAAAAAPYCAAAAAAAA9wIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwAgAAAAAAAPACAAAAAAAAAAAAAAAA8L8"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": "ext"
					},
					"AwAAAPcCAAAAAAAA+AIAAAAAAAAAAAAA+AIAAAAAAAD5AgAAAAAAAAAAAAD5AgAAAAAAAPoCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3AgAAAAAAAPcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					230,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPoCAAAAAAAA/AIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6AgAAAAAAAPoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPwCAAAAAAAA/QIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8AgAAAAAAAPwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP0CAAAAAAAA/gIAAAAAAAAAAAAA/gIAAAAAAAAGAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9AgAAAAAAAP0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					236,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAAYDAAAAAAAABwMAAAAAAAAAAAAABwMAAAAAAAAIAwAAAAAAAAAAAAAIAwAAAAAAAAkDAAAAAAAAAAAAAAkDAAAAAAAACgMAAAAAAAAAAAAACgMAAAAAAAALAwAAAAAAAAAAAAALAwAAAAAAAAwDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGAwAAAAAAAAYDAAAAAAAAAAAAAAAA8L8"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": " fName"
					},
					"BgAAAAwDAAAAAAAADQMAAAAAAAAAAAAADQMAAAAAAAAOAwAAAAAAAAAAAAAOAwAAAAAAAA8DAAAAAAAAAAAAAA8DAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAARAwAAAAAAAAAAAAARAwAAAAAAABIDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMAwAAAAAAAAwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABIDAAAAAAAAEwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASAwAAAAAAABIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					243,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP0CAAAAAAAA/gIAAAAAAAAAAAAA/gIAAAAAAAAGAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9AgAAAAAAAP0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					252,
					1,
					"left_delete",
					null,
					"AQAAAP0CAAAAAAAA/QIAAAAAAAAfAAAACiAgICAgICAgCiAgICAgICAgcmV0dXJuIGZOYW1lOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcAwAAAAAAAP0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP0CAAAAAAAA/gIAAAAAAAAAAAAA/gIAAAAAAAAGAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9AgAAAAAAAP0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAAYDAAAAAAAABwMAAAAAAAAAAAAABwMAAAAAAAAPAwAAAAAAAAAAAAD+AgAAAAAAAP4CAAAAAAAACAAAACAgICAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGAwAAAAAAAAYDAAAAAAAAAAAAAAAA8L8"
				],
				[
					261,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAAcDAAAAAAAACAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHAwAAAAAAAAcDAAAAAAAAAAAAAAAA8L8"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": "ystem.out.print"
					},
					"DwAAAAgDAAAAAAAACQMAAAAAAAAAAAAACQMAAAAAAAAKAwAAAAAAAAAAAAAKAwAAAAAAAAsDAAAAAAAAAAAAAAsDAAAAAAAADAMAAAAAAAAAAAAADAMAAAAAAAANAwAAAAAAAAAAAAANAwAAAAAAAA4DAAAAAAAAAAAAAA4DAAAAAAAADwMAAAAAAAAAAAAADwMAAAAAAAAQAwAAAAAAAAAAAAAQAwAAAAAAABEDAAAAAAAAAAAAABEDAAAAAAAAEgMAAAAAAAAAAAAAEgMAAAAAAAATAwAAAAAAAAAAAAATAwAAAAAAABQDAAAAAAAAAAAAABQDAAAAAAAAFQMAAAAAAAAAAAAAFQMAAAAAAAAWAwAAAAAAAAAAAAAWAwAAAAAAABcDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAwAAAAAAAAgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": "ln"
					},
					"AgAAABcDAAAAAAAAGAMAAAAAAAAAAAAAGAMAAAAAAAAZAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXAwAAAAAAABcDAAAAAAAAAAAAAAAA8L8"
				],
				[
					265,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABkDAAAAAAAAGwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZAwAAAAAAABkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					266,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABoDAAAAAAAAHAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaAwAAAAAAABoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": "Out"
					},
					"AwAAABsDAAAAAAAAHAMAAAAAAAAAAAAAHAMAAAAAAAAdAwAAAAAAAAAAAAAdAwAAAAAAAB4DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAwAAAAAAABsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					268,
					3,
					"left_delete",
					null,
					"AwAAAB0DAAAAAAAAHQMAAAAAAAABAAAAdBwDAAAAAAAAHAMAAAAAAAABAAAAdRsDAAAAAAAAGwMAAAAAAAABAAAATw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeAwAAAAAAAB4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": "What"
					},
					"BAAAABsDAAAAAAAAHAMAAAAAAAAAAAAAHAMAAAAAAAAdAwAAAAAAAAAAAAAdAwAAAAAAAB4DAAAAAAAAAAAAAB4DAAAAAAAAHwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAwAAAAAAABsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": " would"
					},
					"BgAAAB8DAAAAAAAAIAMAAAAAAAAAAAAAIAMAAAAAAAAhAwAAAAAAAAAAAAAhAwAAAAAAACIDAAAAAAAAAAAAACIDAAAAAAAAIwMAAAAAAAAAAAAAIwMAAAAAAAAkAwAAAAAAAAAAAAAkAwAAAAAAACUDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfAwAAAAAAAB8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": " you"
					},
					"BAAAACUDAAAAAAAAJgMAAAAAAAAAAAAAJgMAAAAAAAAnAwAAAAAAAAAAAAAnAwAAAAAAACgDAAAAAAAAAAAAACgDAAAAAAAAKQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlAwAAAAAAACUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": " like"
					},
					"BQAAACkDAAAAAAAAKgMAAAAAAAAAAAAAKgMAAAAAAAArAwAAAAAAAAAAAAArAwAAAAAAACwDAAAAAAAAAAAAACwDAAAAAAAALQMAAAAAAAAAAAAALQMAAAAAAAAuAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApAwAAAAAAACkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAC4DAAAAAAAALwMAAAAAAAAAAAAALwMAAAAAAAAwAwAAAAAAAAAAAAAwAwAAAAAAADEDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuAwAAAAAAAC4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": " call"
					},
					"BQAAADEDAAAAAAAAMgMAAAAAAAAAAAAAMgMAAAAAAAAzAwAAAAAAAAAAAAAzAwAAAAAAADQDAAAAAAAAAAAAADQDAAAAAAAANQMAAAAAAAAAAAAANQMAAAAAAAA2AwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxAwAAAAAAADEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": " your"
					},
					"BQAAADYDAAAAAAAANwMAAAAAAAAAAAAANwMAAAAAAAA4AwAAAAAAAAAAAAA4AwAAAAAAADkDAAAAAAAAAAAAADkDAAAAAAAAOgMAAAAAAAAAAAAAOgMAAAAAAAA7AwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AwAAAAAAADYDAAAAAAAAAAAAAAAA8L8"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": " ouptu"
					},
					"BgAAADsDAAAAAAAAPAMAAAAAAAAAAAAAPAMAAAAAAAA9AwAAAAAAAAAAAAA9AwAAAAAAAD4DAAAAAAAAAAAAAD4DAAAAAAAAPwMAAAAAAAAAAAAAPwMAAAAAAABAAwAAAAAAAAAAAABAAwAAAAAAAEEDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7AwAAAAAAADsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					277,
					3,
					"left_delete",
					null,
					"AwAAAEADAAAAAAAAQAMAAAAAAAABAAAAdT8DAAAAAAAAPwMAAAAAAAABAAAAdD4DAAAAAAAAPgMAAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBAwAAAAAAAEEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					278,
					1,
					"insert",
					{
						"characters": "tput"
					},
					"BAAAAD4DAAAAAAAAPwMAAAAAAAAAAAAAPwMAAAAAAABAAwAAAAAAAAAAAABAAwAAAAAAAEEDAAAAAAAAAAAAAEEDAAAAAAAAQgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+AwAAAAAAAD4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": " file?"
					},
					"BgAAAEIDAAAAAAAAQwMAAAAAAAAAAAAAQwMAAAAAAABEAwAAAAAAAAAAAABEAwAAAAAAAEUDAAAAAAAAAAAAAEUDAAAAAAAARgMAAAAAAAAAAAAARgMAAAAAAABHAwAAAAAAAAAAAABHAwAAAAAAAEgDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCAwAAAAAAAEIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEoDAAAAAAAASwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKAwAAAAAAAEoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEsDAAAAAAAATAMAAAAAAAAAAAAATAMAAAAAAABUAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLAwAAAAAAAEsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": "void"
					},
					"BgAAAIkBAAAAAAAAigEAAAAAAAAAAAAAigEAAAAAAACKAQAAAAAAAAYAAABTdHJpbmdHAwAAAAAAAEcDAAAAAAAACAAAACAgICAgICAgigEAAAAAAACLAQAAAAAAAAAAAACLAQAAAAAAAIwBAAAAAAAAAAAAAIwBAAAAAAAAjQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJAQAAAAAAAI8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					298,
					1,
					"left_delete",
					null,
					"AQAAAEkDAAAAAAAASQMAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKAwAAAAAAAEoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					299,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAAEkDAAAAAAAASgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJAwAAAAAAAEkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					301,
					1,
					"left_delete",
					null,
					"AQAAAEkDAAAAAAAASQMAAAAAAAABAAAAXA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKAwAAAAAAAEoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					302,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEkDAAAAAAAASgMAAAAAAAAAAAAASgMAAAAAAABSAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJAwAAAAAAAEkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAFIDAAAAAAAAUwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSAwAAAAAAAFIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": "canner"
					},
					"BgAAAFMDAAAAAAAAVAMAAAAAAAAAAAAAVAMAAAAAAABVAwAAAAAAAAAAAABVAwAAAAAAAFYDAAAAAAAAAAAAAFYDAAAAAAAAVwMAAAAAAAAAAAAAVwMAAAAAAABYAwAAAAAAAAAAAABYAwAAAAAAAFkDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTAwAAAAAAAFMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFkDAAAAAAAAWgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZAwAAAAAAAFkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					310,
					8,
					"left_delete",
					null,
					"CAAAAFkDAAAAAAAAWQMAAAAAAAABAAAAIFgDAAAAAAAAWAMAAAAAAAABAAAAclcDAAAAAAAAVwMAAAAAAAABAAAAZVYDAAAAAAAAVgMAAAAAAAABAAAAblUDAAAAAAAAVQMAAAAAAAABAAAAblQDAAAAAAAAVAMAAAAAAAABAAAAYVMDAAAAAAAAUwMAAAAAAAABAAAAY1IDAAAAAAAAUgMAAAAAAAABAAAAUw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaAwAAAAAAAFoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": "String"
					},
					"BgAAAFIDAAAAAAAAUwMAAAAAAAAAAAAAUwMAAAAAAABUAwAAAAAAAAAAAABUAwAAAAAAAFUDAAAAAAAAAAAAAFUDAAAAAAAAVgMAAAAAAAAAAAAAVgMAAAAAAABXAwAAAAAAAAAAAABXAwAAAAAAAFgDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSAwAAAAAAAFIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					312,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFgDAAAAAAAAWQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYAwAAAAAAAFgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					314,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAFkDAAAAAAAAWgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZAwAAAAAAAFkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					316,
					1,
					"insert",
					{
						"characters": "Name"
					},
					"BAAAAFoDAAAAAAAAWwMAAAAAAAAAAAAAWwMAAAAAAABcAwAAAAAAAAAAAABcAwAAAAAAAF0DAAAAAAAAAAAAAF0DAAAAAAAAXgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaAwAAAAAAAFoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					317,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAF4DAAAAAAAAXwMAAAAAAAAAAAAAXwMAAAAAAABgAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeAwAAAAAAAF4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					318,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGADAAAAAAAAYQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgAwAAAAAAAGADAAAAAAAAAAAAAAAA8L8"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": "input.next5"
					},
					"CwAAAGEDAAAAAAAAYgMAAAAAAAAAAAAAYgMAAAAAAABjAwAAAAAAAAAAAABjAwAAAAAAAGQDAAAAAAAAAAAAAGQDAAAAAAAAZQMAAAAAAAAAAAAAZQMAAAAAAABmAwAAAAAAAAAAAABmAwAAAAAAAGcDAAAAAAAAAAAAAGcDAAAAAAAAaAMAAAAAAAAAAAAAaAMAAAAAAABpAwAAAAAAAAAAAABpAwAAAAAAAGoDAAAAAAAAAAAAAGoDAAAAAAAAawMAAAAAAAAAAAAAawMAAAAAAABsAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhAwAAAAAAAGEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					321,
					1,
					"left_delete",
					null,
					"AQAAAGsDAAAAAAAAawMAAAAAAAABAAAANQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsAwAAAAAAAGwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAGsDAAAAAAAAbAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrAwAAAAAAAGsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					323,
					1,
					"left_delete",
					null,
					"AQAAAGsDAAAAAAAAawMAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsAwAAAAAAAGwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					324,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGsDAAAAAAAAbQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrAwAAAAAAAGsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					326,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAG0DAAAAAAAAbgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtAwAAAAAAAG0DAAAAAAAAAAAAAAAA8L8"
				],
				[
					337,
					1,
					"left_delete",
					null,
					"AQAAAOYCAAAAAAAA5gIAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnAgAAAAAAAOcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					339,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAOYCAAAAAAAA5wIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmAgAAAAAAAOYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAL8BAAAAAAAAwAEAAAAAAAAAAAAAwAEAAAAAAADEAQAAAAAAAAAAAADEAQAAAAAAAMgBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/AQAAAAAAAL8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					355,
					1,
					"insert",
					{
						"characters": "String"
					},
					"BgAAAMgBAAAAAAAAyQEAAAAAAAAAAAAAyQEAAAAAAADKAQAAAAAAAAAAAADKAQAAAAAAAMsBAAAAAAAAAAAAAMsBAAAAAAAAzAEAAAAAAAAAAAAAzAEAAAAAAADNAQAAAAAAAAAAAADNAQAAAAAAAM4BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIAQAAAAAAAMgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM4BAAAAAAAAzwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOAQAAAAAAAM4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					357,
					1,
					"left_delete",
					null,
					"AQAAAM4BAAAAAAAAzgEAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPAQAAAAAAAM8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					358,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAM4BAAAAAAAA0AEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOAQAAAAAAAM4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANABAAAAAAAA0QEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQAQAAAAAAANABAAAAAAAAAAAAAAAA8L8"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "ioName"
					},
					"BgAAANEBAAAAAAAA0gEAAAAAAAAAAAAA0gEAAAAAAADTAQAAAAAAAAAAAADTAQAAAAAAANQBAAAAAAAAAAAAANQBAAAAAAAA1QEAAAAAAAAAAAAA1QEAAAAAAADWAQAAAAAAAAAAAADWAQAAAAAAANcBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRAQAAAAAAANEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANcBAAAAAAAA2AEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXAQAAAAAAANcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAANgBAAAAAAAA2QEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYAQAAAAAAANgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAANkBAAAAAAAA2gEAAAAAAAAAAAAA2gEAAAAAAADbAQAAAAAAAAAAAADbAQAAAAAAANwBAAAAAAAAAAAAANwBAAAAAAAA3QEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZAQAAAAAAANkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdAQAAAAAAAN0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					387,
					1,
					"insert",
					{
						"characters": "String"
					},
					"BgAAAN4BAAAAAAAA3wEAAAAAAAAAAAAA3wEAAAAAAADgAQAAAAAAAAAAAADgAQAAAAAAAOEBAAAAAAAAAAAAAOEBAAAAAAAA4gEAAAAAAAAAAAAA4gEAAAAAAADjAQAAAAAAAAAAAADjAQAAAAAAAOQBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeAQAAAAAAAN4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					388,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAOQBAAAAAAAA5gEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkAQAAAAAAAOQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					389,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAOUBAAAAAAAA5gEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlAQAAAAAAAOUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					391,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOcBAAAAAAAA6AEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnAQAAAAAAAOcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					415,
					2,
					"left_delete",
					null,
					"AgAAAAkDAAAAAAAACQMAAAAAAAAbAAAAdHJpbmcgaU5hbWUgPSBpbnB1dC5uZXh0KCk7CAMAAAAAAAAIAwAAAAAAAAEAAABT",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkAwAAAAAAAAkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					417,
					1,
					"insert",
					{
						"characters": "ioName"
					},
					"BgAAAAgDAAAAAAAACQMAAAAAAAAAAAAACQMAAAAAAAAKAwAAAAAAAAAAAAAKAwAAAAAAAAsDAAAAAAAAAAAAAAsDAAAAAAAADAMAAAAAAAAAAAAADAMAAAAAAAANAwAAAAAAAAAAAAANAwAAAAAAAA4DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAwAAAAAAAAgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					421,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA4DAAAAAAAADwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAwAAAAAAAA4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					422,
					1,
					"left_delete",
					null,
					"AQAAAA4DAAAAAAAADgMAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPAwAAAAAAAA8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					423,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAA4DAAAAAAAADwMAAAAAAAAAAAAADwMAAAAAAAAQAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAwAAAAAAAA4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					424,
					1,
					"insert",
					{
						"characters": " input.next"
					},
					"CwAAABADAAAAAAAAEQMAAAAAAAAAAAAAEQMAAAAAAAASAwAAAAAAAAAAAAASAwAAAAAAABMDAAAAAAAAAAAAABMDAAAAAAAAFAMAAAAAAAAAAAAAFAMAAAAAAAAVAwAAAAAAAAAAAAAVAwAAAAAAABYDAAAAAAAAAAAAABYDAAAAAAAAFwMAAAAAAAAAAAAAFwMAAAAAAAAYAwAAAAAAAAAAAAAYAwAAAAAAABkDAAAAAAAAAAAAABkDAAAAAAAAGgMAAAAAAAAAAAAAGgMAAAAAAAAbAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQAwAAAAAAABADAAAAAAAAAAAAAAAA8L8"
				],
				[
					425,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABsDAAAAAAAAHQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAwAAAAAAABsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					427,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAB0DAAAAAAAAHgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdAwAAAAAAAB0DAAAAAAAAAAAAAAAA8L8"
				],
				[
					435,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAA4DAAAAAAAAEAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAwAAAAAAAA4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					437,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAA8DAAAAAAAAEAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPAwAAAAAAAA8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					444,
					1,
					"insert",
					{
						"characters": "ioName"
					},
					"BwAAAHgDAAAAAAAAeQMAAAAAAAAAAAAAeQMAAAAAAAB5AwAAAAAAABwAAABTdHJpbmcgb05hbWUgPSBpbnB1dC5uZXh0KCk7eQMAAAAAAAB6AwAAAAAAAAAAAAB6AwAAAAAAAHsDAAAAAAAAAAAAAHsDAAAAAAAAfAMAAAAAAAAAAAAAfAMAAAAAAAB9AwAAAAAAAAAAAAB9AwAAAAAAAH4DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUAwAAAAAAAHgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					446,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAH4DAAAAAAAAgAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+AwAAAAAAAH4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAH8DAAAAAAAAgAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/AwAAAAAAAH8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAIEDAAAAAAAAggMAAAAAAAAAAAAAggMAAAAAAACDAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBAwAAAAAAAIEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": " input.next"
					},
					"CwAAAIMDAAAAAAAAhAMAAAAAAAAAAAAAhAMAAAAAAACFAwAAAAAAAAAAAACFAwAAAAAAAIYDAAAAAAAAAAAAAIYDAAAAAAAAhwMAAAAAAAAAAAAAhwMAAAAAAACIAwAAAAAAAAAAAACIAwAAAAAAAIkDAAAAAAAAAAAAAIkDAAAAAAAAigMAAAAAAAAAAAAAigMAAAAAAACLAwAAAAAAAAAAAACLAwAAAAAAAIwDAAAAAAAAAAAAAIwDAAAAAAAAjQMAAAAAAAAAAAAAjQMAAAAAAACOAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDAwAAAAAAAIMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					451,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI4DAAAAAAAAkAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOAwAAAAAAAI4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					452,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AQAAAI8DAAAAAAAAkAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAwAAAAAAAI8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					454,
					2,
					"left_delete",
					null,
					"AgAAAJADAAAAAAAAkAMAAAAAAAABAAAAKY8DAAAAAAAAjwMAAAAAAAABAAAASQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAwAAAAAAAJEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					455,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAI8DAAAAAAAAkAMAAAAAAAAAAAAAkAMAAAAAAACRAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAwAAAAAAAI8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					456,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJEDAAAAAAAAkgMAAAAAAAAAAAAAkgMAAAAAAACaAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAwAAAAAAAJEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					462,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CQAAAJoDAAAAAAAAmwMAAAAAAAAAAAAAmwMAAAAAAACjAwAAAAAAAAAAAACSAwAAAAAAAJIDAAAAAAAACAAAACAgICAgICAgmwMAAAAAAACcAwAAAAAAAAAAAACcAwAAAAAAAJ0DAAAAAAAAAAAAAJ0DAAAAAAAAngMAAAAAAAAAAAAAngMAAAAAAACfAwAAAAAAAAAAAACfAwAAAAAAAKADAAAAAAAAAAAAAKADAAAAAAAAoQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaAwAAAAAAAJoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": " io"
					},
					"AwAAAKEDAAAAAAAAogMAAAAAAAAAAAAAogMAAAAAAACjAwAAAAAAAAAAAACjAwAAAAAAAKQDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAwAAAAAAAKEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": "Name;"
					},
					"BQAAAKQDAAAAAAAApQMAAAAAAAAAAAAApQMAAAAAAACmAwAAAAAAAAAAAACmAwAAAAAAAKcDAAAAAAAAAAAAAKcDAAAAAAAAqAMAAAAAAAAAAAAAqAMAAAAAAACpAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkAwAAAAAAAKQDAAAAAAAAAAAAAAAA8L8"
				],
				[
					476,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AgAAAIkBAAAAAAAAigEAAAAAAAAAAAAAigEAAAAAAACKAQAAAAAAAAQAAAB2b2lk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJAQAAAAAAAI0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					478,
					1,
					"insert",
					{
						"characters": "tring"
					},
					"BQAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAACMAQAAAAAAAI0BAAAAAAAAAAAAAI0BAAAAAAAAjgEAAAAAAAAAAAAAjgEAAAAAAACPAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAQAAAAAAAIoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					480,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAI8BAAAAAAAAkQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAQAAAAAAAI8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					507,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALMDAAAAAAAAtAMAAAAAAAAAAAAAtAMAAAAAAAC4AwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzAwAAAAAAALMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					510,
					1,
					"paste",
					null,
					"AQAAALgDAAAAAAAAQBMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AwAAAAAAALgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					516,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALMDAAAAAAAAtAMAAAAAAAAAAAAAtAMAAAAAAAC4AwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzAwAAAAAAALMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					521,
					1,
					"left_delete",
					null,
					"AgAAALkDAAAAAAAAuQMAAAAAAAAdAAAAICAgICAgICAvL1JlZ2lvbiBwcmludCBtZXRob2S0AwAAAAAAALQDAAAAAAAABAAAACAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWAwAAAAAAALkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					523,
					1,
					"left_delete",
					null,
					"AQAAALQDAAAAAAAAtAMAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1AwAAAAAAALUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					528,
					1,
					"left_delete",
					null,
					"AQAAAO4DAAAAAAAA7gMAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvAwAAAAAAAO8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAO4DAAAAAAAA7wMAAAAAAAAAAAAA7wMAAAAAAADzAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuAwAAAAAAAO4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					535,
					1,
					"left_delete",
					null,
					"AQAAACkEAAAAAAAAKQQAAAAAAAA4AAAAICAgIC8vTnVjbGVvdGlkZXMgcHJpbnQgbWV0aG9kIGNhbGxpbmcgYWxnb3JpdGhtIGFzIHdlbGw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhBAAAAAAAACkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					540,
					1,
					"left_delete",
					null,
					"AQAAAHAEAAAAAAAAcAQAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxBAAAAAAAAHEEAAAAAAAAAAAAAAAA8L8"
				],
				[
					542,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHAEAAAAAAAAcQQAAAAAAAAAAAAAcQQAAAAAAAB1BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwBAAAAAAAAHAEAAAAAAAAAAAAAAAA8L8"
				],
				[
					547,
					1,
					"left_delete",
					null,
					"AQAAAP4EAAAAAAAA/gQAAAAAAAAgAAAACiAgICAvL0FsZ29yaXRobSBmb3IgbnVjbGVvdGlkZXM",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeBQAAAAAAAP4EAAAAAAAAAAAAAAAA8L8"
				],
				[
					549,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP4EAAAAAAAA/wQAAAAAAAAAAAAA/wQAAAAAAAADBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+BAAAAAAAAP4EAAAAAAAAAAAAAAAA8L8"
				],
				[
					554,
					1,
					"left_delete",
					null,
					"AgAAAGcFAAAAAAAAZwUAAAAAAAABAAAAIP8EAAAAAAAA/wQAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoBQAAAAAAAGgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGMFAAAAAAAAZAUAAAAAAAAAAAAAZAUAAAAAAABoBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjBQAAAAAAAGMFAAAAAAAAAAAAAAAA8L8"
				],
				[
					572,
					1,
					"left_delete",
					null,
					"AQAAAGkHAAAAAAAAaQcAAAAAAAAbAAAACiAgICAgICAvL0FsZ29yaXRoIGZvciBtYXNz",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEBwAAAAAAAGkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					574,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGkHAAAAAAAAagcAAAAAAAAAAAAAagcAAAAAAABuBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpBwAAAAAAAGkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					582,
					1,
					"left_delete",
					null,
					"BgAAAI4IAAAAAAAAjggAAAAAAAAEAAAAICAgIHAIAAAAAAAAcAgAAAAAAAAEAAAAICAgIEMIAAAAAAAAQwgAAAAAAAAEAAAAICAgINoHAAAAAAAA2gcAAAAAAAAEAAAAICAgIHMHAAAAAAAAcwcAAAAAAAAEAAAAICAgIGoHAAAAAAAAagcAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAUAAAB3BwAAAAAAAHcHAAAAAAAAAAAAAAAA8L/eBwAAAAAAAN4HAAAAAAAAAAAAAAAA8L9HCAAAAAAAAEcIAAAAAAAAAAAAAAAA8L90CAAAAAAAAHQIAAAAAAAAAAAAAAAA8L+SCAAAAAAAAJIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					586,
					1,
					"left_delete",
					null,
					"AQAAAMsHAAAAAAAAywcAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMBwAAAAAAAMwHAAAAAAAAAAAAAAAA8L8"
				],
				[
					588,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMsHAAAAAAAAzAcAAAAAAAAAAAAAzAcAAAAAAADQBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLBwAAAAAAAMsHAAAAAAAAAAAAAAAA8L8"
				],
				[
					593,
					1,
					"left_delete",
					null,
					"AQAAAB8IAAAAAAAAHwgAAAAAAAAXAAAAIC8vY29uc3RhbnQgbWFzc2VzIGZvciA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2CAAAAAAAAB8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					642,
					1,
					"left_delete",
					null,
					"AQAAAAoJAAAAAAAACgkAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOCQAAAAAAAA4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					644,
					1,
					"left_delete",
					null,
					"AQAAAAYJAAAAAAAABgkAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKCQAAAAAAAAoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					646,
					1,
					"left_delete",
					null,
					"AQAAAAUJAAAAAAAABQkAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGCQAAAAAAAAYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					662,
					1,
					"left_delete",
					null,
					"AQAAAD8KAAAAAAAAPwoAAAAAAAArAAAAICAgIC8vRm9ybXVsYSBmb3IgbWFraW5nIGludGVyZ2VycyBwZXJjZW50Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/CgAAAAAAAGoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					665,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAD8KAAAAAAAAQAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/CgAAAAAAAD8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					670,
					1,
					"left_delete",
					null,
					"AQAAALEKAAAAAAAAsQoAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyCgAAAAAAALIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					672,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALEKAAAAAAAAsgoAAAAAAAAAAAAAsgoAAAAAAAC2CgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxCgAAAAAAALEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					683,
					1,
					"left_delete",
					null,
					"AQAAAJILAAAAAAAAkgsAAAAAAAAqAAAAICAgIC8vQWxnb3JpdGhtIGZvciBjb2RvbnMgKyBwcmludCBtZXRob2QK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSCwAAAAAAALwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					686,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJILAAAAAAAAkwsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSCwAAAAAAAJILAAAAAAAAAAAAAAAA8L8"
				],
				[
					691,
					1,
					"left_delete",
					null,
					"AQAAAPkLAAAAAAAA+QsAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6CwAAAAAAAPoLAAAAAAAAAAAAAAAA8L8"
				],
				[
					693,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPkLAAAAAAAA+gsAAAAAAAAAAAAA+gsAAAAAAAD+CwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5CwAAAAAAAPkLAAAAAAAAAAAAAAAA8L8"
				],
				[
					703,
					1,
					"left_delete",
					null,
					"AQAAAAEOAAAAAAAAAQ4AAAAAAAA6AAAAICAgIC8vTWV0aG9kIGZvciBjaGVja2luZyBpZiBwcm90aWVuIGRlc2lnbmF0aW9uIGlzIHZhbGlkCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABDgAAAAAAADsOAAAAAAAAAAAAAAAA8L8"
				],
				[
					706,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAEOAAAAAAAAAg4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABDgAAAAAAAAEOAAAAAAAAAAAAAAAA8L8"
				],
				[
					711,
					1,
					"left_delete",
					null,
					"AQAAAF0OAAAAAAAAXQ4AAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeDgAAAAAAAF4OAAAAAAAAAAAAAAAA8L8"
				],
				[
					713,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAF0OAAAAAAAAXg4AAAAAAAAAAAAAXg4AAAAAAABiDgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdDgAAAAAAAF0OAAAAAAAAAAAAAAAA8L8"
				],
				[
					727,
					1,
					"left_delete",
					null,
					"AQAAAJYPAAAAAAAAlg8AAAAAAAATAAAAICAgIC8vc3RhcnQgbWV0aG9kCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWDwAAAAAAAKkPAAAAAAAAAAAAAAAA8L8"
				],
				[
					730,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJYPAAAAAAAAlw8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWDwAAAAAAAJYPAAAAAAAAAAAAAAAA8L8"
				],
				[
					749,
					1,
					"left_delete",
					null,
					"AQAAAA4QAAAAAAAADhAAAAAAAAASAAAAICAgIC8vc3RvcCBtZXRob2QK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOEAAAAAAAACAQAAAAAAAAAAAAAAAA8L8"
				],
				[
					752,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAA4QAAAAAAAADxAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOEAAAAAAAAA4QAAAAAAAAAAAAAAAA8L8"
				],
				[
					758,
					1,
					"left_delete",
					null,
					"AQAAAMwPAAAAAAAAzA8AAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNDwAAAAAAAM0PAAAAAAAAAAAAAAAA8L8"
				],
				[
					760,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMwPAAAAAAAAzQ8AAAAAAAAAAAAAzQ8AAAAAAADRDwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMDwAAAAAAAMwPAAAAAAAAAAAAAAAA8L8"
				],
				[
					766,
					1,
					"left_delete",
					null,
					"AQAAAEcQAAAAAAAARxAAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIEAAAAAAAAEgQAAAAAAAAAAAAAAAA8L8"
				],
				[
					768,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEcQAAAAAAAASBAAAAAAAAAAAAAASBAAAAAAAABMEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHEAAAAAAAAEcQAAAAAAAAAAAAAAAA8L8"
				],
				[
					774,
					4,
					"left_delete",
					null,
					"BAAAAPkRAAAAAAAA+REAAAAAAAABAAAAffgRAAAAAAAA+BEAAAAAAAABAAAACvQRAAAAAAAA9BEAAAAAAAAEAAAAICAgIPMRAAAAAAAA8xEAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6EQAAAAAAAPoRAAAAAAAAAAAAAAAA8L8"
				],
				[
					780,
					1,
					"left_delete",
					null,
					"AQAAADcRAAAAAAAANxEAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4EQAAAAAAADgRAAAAAAAAAAAAAAAA8L8"
				],
				[
					782,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADcRAAAAAAAAOBEAAAAAAAAAAAAAOBEAAAAAAAA8EQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3EQAAAAAAADcRAAAAAAAAAAAAAAAA8L8"
				],
				[
					790,
					1,
					"left_delete",
					null,
					"AQAAALQRAAAAAAAAtBEAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1EQAAAAAAALURAAAAAAAAAAAAAAAA8L8"
				],
				[
					792,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAALQRAAAAAAAAtREAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0EQAAAAAAALQRAAAAAAAAAAAAAAAA8L8"
				],
				[
					794,
					1,
					"left_delete",
					null,
					"AQAAALQRAAAAAAAAtBEAAAAAAAABAAAAXA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1EQAAAAAAALURAAAAAAAAAAAAAAAA8L8"
				],
				[
					796,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALQRAAAAAAAAtREAAAAAAAAAAAAAtREAAAAAAAC5EQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0EQAAAAAAALQRAAAAAAAAAAAAAAAA8L8"
				],
				[
					881,
					1,
					"left_delete",
					null,
					"AQAAAIkOAAAAAAAAiQ4AAAAAAAANAAAACiAgICAgICAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWDgAAAAAAAIkOAAAAAAAAAAAAAAAA8L8"
				],
				[
					886,
					1,
					"left_delete",
					null,
					"AQAAAKAOAAAAAAAAoA4AAAAAAAANAAAACiAgICAgICAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtDgAAAAAAAKAOAAAAAAAAAAAAAAAA8L8"
				],
				[
					891,
					1,
					"left_delete",
					null,
					"AQAAALYOAAAAAAAAtg4AAAAAAAANAAAACiAgICAgICAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDDgAAAAAAALYOAAAAAAAAAAAAAAAA8L8"
				],
				[
					895,
					1,
					"left_delete",
					null,
					"AQAAAGwOAAAAAAAAbA4AAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwDgAAAAAAAHAOAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "assignments/week7/lab_5/DMMadLibs.java",
			"settings":
			{
				"buffer_size": 7667,
				"line_ending": "Unix"
			}
		},
		{
			"file": "assignments/week6/assignment_2/DMCalendarP2.java",
			"settings":
			{
				"buffer_size": 11142,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import java.io.*;\nimport java.util.Scanner;\nimport java.util.Calendar;\n\npublic class CalendarAssignment2 {\n    \n    private static final int CELL_WIDTH = 20;\n    private static final int DAY_IN_WEEK = 7;\n    private static final String[][] EVENT_STORE = new String[][] {\n        new String[31],\n        new String[29],\n        new String[31],\n        new String[30],\n        new String[31],\n        new String[30],\n        new String[31],\n        new String[31],\n        new String[30],\n        new String[31],\n        new String[30],\n        new String[31]\n    };\n    private static final PrintStream logger = System.out;\n\n    public static void main(String[] args){\n        String command = \"\";\n        Calendar selectedCalendar = null;\n        Scanner console = new Scanner(System.in);\n        while (!command.equals(\"q\")) {\n            command = askUser(console);\n            switch(command) {\n                case \"e\":\n                    selectedCalendar = optionE(console);\n                    break;\n                case \"t\":\n                    selectedCalendar = optionT();\n                    break;\n                case \"n\":\n                    optionN(selectedCalendar);\n                    break;\n                case \"p\":\n                    optionP(selectedCalendar);\n                    break;\n                case \"ev\":\n                    optionEv(console);\n                    break;\n                case \"q\":\n                    break;\n                default:\n                    logger.println(\"Please enter a valid command\");\n                    break;\n            }\n        }\n        console.close();\n    }\n\n    private static String askUser(Scanner console) {\n        logger.println(\"Please type a command\");\n        logger.println(\" 'ev' to add event to calender\");\n        logger.println(\" 't' to get todays date and display the todays calender\");\n        logger.println(\" 'e' to enter date and display the corresponding calendar \");\n        logger.println(\" 'n' to display the next month\");\n        logger.println(\" 'p' to display the previous month\");\n        logger.println(\" 'q' to quit the program\");\n        return console.nextLine();\n    }\n\n    private static Calendar optionE(Scanner console) {\n        Calendar calendar = askUserForDate(console);\n        if (calendar == null) {\n            return null;\n        }\n\n        Calendar thisMonth = Calendar.getInstance();\n        boolean shouldMarkOnCalendar = thisMonth.get(Calendar.MONTH) == calendar.get(Calendar.MONTH);\n        printCalendar(calendar, shouldMarkOnCalendar);\n        return calendar;\n    }\n\n    private static Calendar optionT() {\n        Calendar calendar = Calendar.getInstance();\n        printCalendar(calendar, true);\n        return calendar;\n    }\n\n    private static void optionN (Calendar targetCalendar) {\n        if (targetCalendar == null) {\n            logger.println(\"You need to enter the date in mm/dd format before choosing this option\");\n            return;\n        }\n\n        Calendar nextMonth = Calendar.getInstance();\n        nextMonth.set(targetCalendar.get(Calendar.YEAR), targetCalendar.get(Calendar.MONTH) + 1, targetCalendar.get(Calendar.DAY_OF_MONTH));\n        printCalendar(nextMonth, false);\n    }\n\n    private static void optionP (Calendar targetCalendar) {\n        if (targetCalendar == null) {\n            logger.println(\"You need to enter the date in mm/dd format before choosing this option\");\n            return;\n        }\n\n        Calendar previousMonth = Calendar.getInstance();\n        previousMonth.set(targetCalendar.get(Calendar.YEAR), targetCalendar.get(Calendar.MONTH) - 1, targetCalendar.get(Calendar.DAY_OF_MONTH));\n        printCalendar(previousMonth, false);\n    }\n\n    private static void optionEv(Scanner console) {\n        setEventStore(console);\n        logger.println(\"Event has been added\");\n    }\n\n    private static void setEventStore(Scanner console) {\n        logger.println(\"Please enter an event in this format \\\"MM/DD event_title\\\"\");\n        String text = console.nextLine();\n        while (!text.matches(\"\\\\d{1,2}\\\\/\\\\d{1,2} .+\")) {\n            logger.println(\"Invalid format. Please enter it again\");\n            text = console.nextLine();\n        }\n\n        Calendar validDate = validateDateText(text);\n        while (!text.matches(\"\\\\d{1,2}\\\\/\\\\d{1,2} .+\") && validDate == null) {\n            logger.println(\"Invalid format. Please enter it again\");\n            text = console.nextLine();\n            validDate = validateDateText(text);\n        }\n\n        EVENT_STORE[validDate.get(Calendar.MONTH)][validDate.get(Calendar.DAY_OF_MONTH) - 1] = text.substring(text.indexOf(\" \") + 1);\n        logger.println(\"MONTH: \" + validDate.get(Calendar.MONTH));\n        logger.println(\"DATE: \" + (validDate.get(Calendar.DAY_OF_MONTH) - 1));\n    }\n\n    private static Calendar validateDateText(String text) {\n        int month = Integer.parseInt(text.substring(0, text.indexOf(\"/\")));\n        int date = Integer.parseInt(text.substring(text.indexOf(\"/\") + 1, text.indexOf(\" \")));\n        if (month < 1 && month > 12) {\n            return null;\n        }\n\n        if (EVENT_STORE[month - 1].length >= date) {\n            Calendar validDate = Calendar.getInstance();\n            validDate.set(Calendar.MONTH, month - 1);\n            validDate.set(Calendar.DAY_OF_MONTH, date);\n            return validDate;\n        }\n\n        return null;\n    }\n\n    private static Calendar askUserForDate(Scanner console) {\n        logger.println(\"What date would you like to look at? (mm/dd)\");\n        String date = console.nextLine();\n        if (date.length() != 5 || !date.contains(\"/\")) {\n            logger.println(\"Sorry, that input is invalid.\");\n            return null;\n        }\n        return getCalendarFromString(date);\n    }\n\n    private static Calendar getCalendarFromString(String date) {\n        Calendar result = Calendar.getInstance();\n        String[] dateInfo = date.split(\"/\");\n        int month = Integer.parseInt(dateInfo[0]);\n        int day = Integer.parseInt(dateInfo[1]);\n        result.set(result.get(Calendar.YEAR), month - 1, day);\n        return result;\n    }\n\n    private static void printCalendar(Calendar calendar, boolean markCurrentDate) {\n        int centerOfTheCalendar = (CELL_WIDTH * 8 + 2) / 2;\n        String spaces = getNCharacter(' ', centerOfTheCalendar);\n        logger.println(spaces + getMonth(calendar));\n        printRowLine();\n\n        Calendar firstDay = Calendar.getInstance();\n        firstDay.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), 1);\n        int dayInWeek = firstDay.get(DAY_IN_WEEK); // Find the first day in week\n        int maxDateInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);\n        int currentDate = 1;\n        while (currentDate <= maxDateInMonth) {\n            currentDate = printRowDate(currentDate, dayInWeek, maxDateInMonth);\n            printEventStore(currentDate - DAY_IN_WEEK, calendar.get(Calendar.MONTH));\n            if (markCurrentDate) {\n                printRowEmpty(currentDate - DAY_IN_WEEK, calendar.get(Calendar.DAY_OF_MONTH));\n            }\n            else {\n                printRowEmpty();\n            }\n            printRowLine();\n        }\n    }\n\n    private static int printRowDate(int currentDate, int firstDayInWeek, int maxDateInMonth) {\n        logger.print(\"|\");\n        for (int i = 0; i < DAY_IN_WEEK; i++) {\n            if (currentDate == 1 && firstDayInWeek - 1 != i) {\n                logger.print(\" \");\n            }\n            else if (currentDate > maxDateInMonth) {\n                logger.print(\"  \");\n                currentDate++;\n            }\n            else {\n                logger.print(currentDate);\n                currentDate++;\n            }\n\n            String spaces;\n            if (currentDate <= 10) {\n                // currentDate is one digit.\n                spaces = getNCharacter(' ', CELL_WIDTH - 1);\n            } else {\n                // currentDate is two digit.\n                spaces = getNCharacter(' ', CELL_WIDTH - 2);\n            }\n            logger.print(spaces + \"|\");\n            \n        }\n        logger.println();\n        return currentDate;\n    }\n\n    private static void printEventStore(int currentDate, int currentMonth) {\n        logger.print(\"|\");\n        currentDate--;\n        for (int i = 0; i < DAY_IN_WEEK; i++) {\n            if (currentDate + i < 0 || currentDate + i >= EVENT_STORE[currentMonth].length) {\n                logger.print(getNCharacter(' ', CELL_WIDTH));\n            } else {\n                String event = EVENT_STORE[currentMonth][currentDate + i];\n                if (event != null) {\n                    if (event.length() > CELL_WIDTH) {\n                        logger.print(event.substring(0, CELL_WIDTH));\n                    } else {\n                        logger.print(event + getNCharacter(' ', CELL_WIDTH - event.length()));\n                    }\n                } else {\n                    logger.print(getNCharacter(' ', CELL_WIDTH));\n                }\n            }\n            logger.print(\"|\");\n        }\n        logger.println();\n    }\n\n    private static void printRowEmpty() {\n        logger.print(\"|\");\n        for (int i = 0; i < DAY_IN_WEEK; i++) {\n            String spaces = getNCharacter(' ', CELL_WIDTH);\n            logger.print(spaces + \"|\");\n        }\n        logger.println();\n    }\n\n    private static void printRowEmpty(int currentDate, int markDate) {\n        logger.print(\"|\");\n        for (int i = 0; i < DAY_IN_WEEK; i++) {\n            String spaces;\n            if (currentDate == markDate) {\n                spaces = getNCharacter(' ', CELL_WIDTH / 2 - 3) + \"Today\" + getNCharacter(' ', CELL_WIDTH / 2 - 2);\n            }\n            else {\n                spaces = getNCharacter(' ', CELL_WIDTH);\n            }\n            logger.print(spaces + \"|\");\n            currentDate++;\n        }\n        logger.println();\n    }\n\n    private static void printRowLine() {\n        int width = CELL_WIDTH * 7 + 8;\n        String widthText = getNCharacter('=', width);\n        logger.println(widthText);\n    }\n\n    private static String getNCharacter(char c, int n) {\n        return new String(new char[n]).replace('\\0', c);\n    }\n    \n\n    private static String getMonth(Calendar cal) {\n        return \"\" + (cal.get(Calendar.MONTH) + 1);\n    }\n}",
			"settings":
			{
				"buffer_size": 10320,
				"line_ending": "Unix",
				"name": "import java.io.*;"
			}
		},
		{
			"file": "assignments/week8/assignment_3/calendarEvents.txt",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import java.io.*;\nimport java.util.*;\n\npublic class Calendar3RevisionL{\n   public static final int SIZE = 12;\n   public static final int MAX_DAYS_IN_CAL = 31;\n   public static String[] [] eventArray;\n   public static void main (String[] args) throws FileNotFoundException{\n      Scanner console = new Scanner (System.in); \n      intro(); \n      String options = input(console);\n      int month = -1;\n      int day = -1; \n      loadEventsFromFile (\"calendarEvents.txt\"); \n      while (!options.equals(\"q\")){ \n         if(options.equals (\"e\")){\n            System.out.println(\"Please type Date: \");\n            String date = console.nextLine();\n            month = monthFromDate(date);\n            day = dayFromDate (date); \n            drawMonth (month, day); \n            displayDate (month, day); \n            System.out.println (); \n        }   else if (options.equals(\"ev\")){\n            System.out.println (\"Please type in the date followed by the event (mm/dd event)\");\n            String dateOfEvent = console.next();\n            String event = console.next();\n            month = monthFromDate (dateOfEvent);\n            day = dayFromDate (dateOfEvent); \n            eventArray [month-1] [day-1] = event;\n         }\n         else if (options.equals (\"t\")){\n            String calDate = getCalDate();\n            month = monthFromDate(calDate); \n            day = dayFromDate(calDate); \n            drawMonth(month, day); \n            displayDate(month, day) ;\n            System.out.println();\n         }  else if (options.equals (\"n\")){\n               if (month == -1){\n               System.out.println (\"ERROR! ERROR! PLEASE PRESS \\\"e\\\" TO ENTER DATE! !\");\n           }   else if (month == 12){\n               month = 1; \n          }    else{ \n               month++; \n          }\n           drawMonth (month, day); \n           displayDate (month, day);\n           System.out.println();\n          }   else if (options.equals(\"p\")){ \n              if (month == -1){\n               System.out.println(\"ERROR! ERROR! PLEASE PRESS\\\"e\\\" TOo ENTER DATE!!\");\n           }   else if (month == 1){ \n               month = 12; \n           }   else{ \n               month--; \n           }   \n           drawMonth (month, day); \n           displayDate (month, day);\n           System.out.println (); \n       }   else { \n           System.out.println(\"ERROR! ERROR! PLEASE TYPE APPROPRIATE COMMAND! !\");\n              System.out.println(); \n           }\n           options = input(console); \n       }\n    }\n    public static void intro(){ \n       System.out.println (\"Welcome to my Calendar program!!\"); \n       System.out.println (\"The program will display the different options, \"); \n       System.out.println (\"and pick the date you have chosen.\"); \n       System.out.println (\"Please pick your options:\"); \n       }\n       public static String input (Scanner console){ \n          System.out.println (\"\\\"e\\\" to enter a date and dislay the corresponding calendar\");\n          System.out.println(\"\\\"ev\\\" to enter an event.\"); \n          System.out.println (\"\\\"fp\\\" to print calendar to file\"); \n          System.out.println(\"\\\"t\\\" to get today's date and to display todays calendar\"); \n          System.out.println (\"\\\"n\\\" to display next month\"); \n          System.out.println (\"\\\"p\\\" to previous month\");\n          System.out.println(\"\\\"q\\\" to quit program\"); \n          String x = console.nextLine(); \n          return x.toLowerCase (); \n       }  \n       public static String getCalDate (){\n          String x = \"\"; \n          Calendar cal = Calendar.getinstance(); \n          x += cal.get(Calendar.MONTH) + 1; \n          x += \"/\" + cal.get (Calendar. DATE); \n          return x; \n       } \n       public static void drawMonth (int month, int day){ \n          int startingDay = mstartDay(month); \n          int maxDaysInMonth = mDaysInMonth (month); \n          for (int space = 1; space <= SIZE * 7 / 2 - 1; space++){\n          System.out.print(\" \"); \n          }\n          System.out.print(\" \" + month); \n          for(int i = 0; i < 7; i++) {\n             for (int j = 0; j < SIZE / 2 - 2; j++) { \n                System.out.print(\" \"); \n            }   if(i == 0){ \n                   System.out.print (\"SUN\"); \n              } else if(i == 1){\n                   System.out.print (\"MON\");\n              } else if(i == 2){ \n                   System.out.print (\"TUE\"); \n              } else if(i == 3){\n                   System.out.print (\"WED\"); \n              } else if(i == 4){\n                   System.out.print(\"THU\"); \n              } else if(i == 5){\n                   System.out.print (\"FRI\"); \n              } else if(i == 6){\n                   System.out.print (\"SAT\");\n              } \n              for (int j = 0; j < SIZE / 2 - 1; j++) { \n                 System.out.print(\" \"); \n              }\n           }\n           System.out.println(); \n           int row = 0; \n           while (row * 7 - startingDay + 2 <= maxDaysInMonth){ \n           drawRow (row, startingDay, maxDaysInMonth, day, month); \n           row++; \n           }\n           equal (); \n           System.out.println (); \n        }\n        public static void drawRow (int row, int startingDay, int maxDaysInMonth,int day, int month){ \n           equal(); \n           System.out.println (); \n           System.out.print(\"|\"); \n           if (row = 0){  \n              int noRow = 1; \n              for (int i = 0; i < 7 - (7 - startingDay + 1); i++) { \n                 for (int k = 0; k < SIZE- 1; k++){ \n                    System.out.print(\" \"); \n                 }\n                 System.out.print(\"|\"); \n              }\n              for (int j = 0; j < 7 - startingDay + 1; j++) { \n                 System.out.print(\" \" + noRow +\"  \"); \n                 int numLength = (noRow + \"\").length(); \n                 for (int k = 0; k < SIZE - numLength - 3; k++) { \n                    if(noRow == day) { \n                       System.out.print(\"*\"); \n                }   else { \n                       System.out.print(\" \"); \n                }\n            }\n            System.out.print(\"|\"); \n            noRow++;  \n         }\n      }  else {\n           int noRow = row * 7 - startingDay + 2; \n           for (int no = l; no <= 7; no++){ \n              int numLength = 0; \n              if (noRow <= maxDaysInMonth){ \n                 System.out.print (noRow); \n                 numLength = (noRow + \"\").length(); \n            }  else {\n               numLength = 0; \n            }  for (int i = 0; i < SIZE - numLength - 1; 1++) {\n                  if (noRow == day && noRow <= maxDaysInMonth) { \n                     System.out.print(\"*\"); \n              }   else {\n                  System.out.print(\" \"); \n              }\n           }\n           System.out.print(\"|\"); \n           noRow++; \n        }\n    }\n     System.out.println(); \n     for (int line = 1; line <= SIZE / 3; line++){\n        System.out.print(\"|\"); \n        for (int bar = 1; bar <= 7; bar++){ \n           for (int space = 1; space <= SIZE - 1; space++){ \n              System.out.print(\" \"); \n           }\n           System.out.print(\"|\"); \n        }\n        System.out.println(); \n     }\n   }\n      public static void equal(){ \n         for (int equal = 1; equal <= SIZE * 7; equal++){ \n            System.out.print(\"=\"); \n         }\n      }   \n      public static int monthFromDate (String date){ \n         String x = date.substring (0, date. indexOf(\"/\")); \n         return Integer.parseInt(x); \n      }\n      public static int dayFromDate (String date){ \n         String x = date.substring ((date.indexof (\"/\")+1)); \n         return Integer.parseInt (x); \n      }\n      public static void displayDate (int month, int day){ \n         System.out.println (\"Month: \" + month); \n         System.out.println (\"Day: \" + day); \n      }\n      public static int mDaysInMonth (int month) { \n         if (month == 4 || month == 6 || month == 9 || month == 11){ \n            return 30;\n         }  else if (month == 2){  \n               return 28; \n         }  else {\n               return 31; \n         }\n      }\n      public static int mstartDay (int month){ \n         int day = 2; \n         for (int i = 1; i < month; i++) {\n            day = (day + mDays1nMonth (i) % 7) % 7; \n         }\n         if (day == 0){ \n            day = 7; \n         }\n         return day;\n\n         }\n      public static void loadEventsFromFile (String filename) throws FileNotFoundException { \n            eventArray = new String [12][]; \n            for(int i = 0; i < 12; i++){ \n               eventArray[i] = new String[mDaysInMonth (i)]; \n            }\n            Scanner input = new Scanner (new File (filename)); \n            while (input.hasNext()); \n               String date = input.next(); \n               String event = input.next(); \n               int day = dayFromDate (date); \n               int month = monthFromDate (date); \n               eventArray [month - 1] [day - 1] = event; \n               }\n         }",
			"settings":
			{
				"buffer_size": 8971,
				"line_ending": "Unix",
				"name": "import java.io.*;"
			}
		},
		{
			"contents": "import java.io.*;\nimport java.util.*;\n\npublic class Calendar3Revision{\n   public static final int SIZE = 12;\n   public static final int MAX_DAYS_IN_CAL = 31;\n   public static String[] [] eventArray;\n   public static void main (String[] args) throws FileNotFoundException{\n      Scanner console = new Scanner (System.in); \n      intro(); \n      String options = input(console);\n      int month = -1;\n      int day = -1; \n      loadEventsFromFile (\"calendarEvents.txt\"); \n      while (!options.equals(\"q\")){ \n         if(options.equals (\"e\")){\n            System.out.println(\"Please type Date: \");\n            String date = console.nextLine();\n            month = monthFromDate(date);\n            day = dayFromDate (date); \n            drawMonth (month, day); \n            displayDate (month, day); \n            System.out.println (); \n        }   else if (options.equals(\"ev\")){\n            System.out.println (\"Please type in the date followed by the event (mm/dd event)\");\n            String dateOfEvent = console.next();\n            String event = console.next();\n            month = monthFromDate (dateOfEvent);\n            day = dayFromDate (dateOfEvent); \n            eventArray [month-1] [day-1] = event;\n         }\n         else if (options.equals (\"t\")){\n            String calDate = getCalDate();\n            month = monthFromDate(calDate); \n            day = dayFromDate(calDate); \n            drawMonth(month, day); \n            displayDate(month, day) ;\n            System.out.println();\n         }  else if (options.equals (\"n\")){\n               if (month == -1){\n               System.out.println (\"ERROR! ERROR! PLEASE PRESS \\\"e\\\" TO ENTER DATE! !\");\n           }   else if (month == 12){\n               month = 1; \n          }    else{ \n               month++; \n          }\n           drawMonth (month, day); \n           displayDate (month, day);\n           System.out.println ();\n          }   else if (options.equals(\"p\")){ \n              if (month == -1){\n               System.out.println(\"ERROR! ERROR! PLEASE PRESS\\\"e\\\" TOo ENTER DATE!!\");\n           }   else if (month == 1){ \n               month = 12; \n           }   else{ \n               month--; \n           }   \n           drawMonth (month, day); \n           displayDate (month, day);\n           System.out.println (); \n       }   else { \n           System.out.println(\"ERROR! ERROR! PLEASE TYPE APPROPRIATE COMMAND! !\");\n              System.out.println(); \n           }\n           options = input(console); \n       }\n    }\n    public static void intro(){ \n       System.out.println (\"Welcome to my Calendar program!!\"); \n       System.out.println (\"The program will display the different options, \"); \n       System.out.println (\"and pick the date you have chosen.\"); \n       System.out.println (\"Please pick your options:\"); \n       }\n       public static String input (Scanner console){ \n          System.out.println (\"\\\"e\\\" to enter a date and dislay the corresponding calendar\");\n          System.out.println(\"\\\"ev\\\" to enter an event.\"); \n          System.out.println (\"\\\"fp\\\" to print calendar to file\"); \n          System.out.println(\"\\\"t\\\" to get today's date and to display todays calendar\"); \n          System.out.println (\"\\\"n\\\" to display next month\"); \n          System.out.println (\"\\\"p\\\" to previous month\");\n          System.out.println(\"\\\"q\\\" to quit program\"); \n          String x = console.nextLine(); \n          return x.toLowerCase (); \n       }  \n       public static String getCalDate (){\n          String x = \"\"; \n          Calendar cal = Calendar.getInstance(); \n          x += cal.get(Calendar.MONTH) + 1; \n          x += \"/\" + cal.get (Calendar. DATE); \n          return x; \n       } \n       public static void drawMonth (int month, int day){ \n          int startingDay = mstartDay(month); \n          int maxDaysInMonth = mDaysInMonth (month); \n          for (int space = 1; space <= SIZE * 7 / 2 - 1; space++){\n          System.out.print(\" \"); \n          }\n          System.out.print(\" \" + month); \n          for(int i = 0; i < 7; i++) {\n             for (int j = 0; j < SIZE / 2 - 2; j++) { \n                System.out.print(\" \"); \n            }   if(i == 0){ \n                   System.out.print (\"SUN\"); \n              } else if(i == 1){\n                   System.out.print (\"MON\");\n              } else if(i == 2){ \n                   System.out.print (\"TUE\"); \n              } else if(i == 3){\n                   System.out.print (\"WED\"); \n              } else if(i == 4){\n                   System.out.print(\"THU\"); \n              } else if(i == 5){\n                   System.out.print (\"FRI\"); \n              } else if(i == 6){\n                   System.out.print (\"SAT\");\n              } \n              for (int j = 0; j < SIZE / 2 - 1; j++) { \n                 System.out.print(\" \"); \n              }\n           }\n           System.out.println(); \n           int row = 0; \n           while (row * 7 - startingDay + 2 <= maxDaysInMonth){ \n           drawRow (row, startingDay, maxDaysInMonth, day, month); \n           row++; \n           }\n           equal (); \n           System.out.println (); \n        }\n        public static void drawRow (int row, int startingDay, int maxDaysInMonth,int day, int month){ \n           equal(); \n           System.out.println (); \n           System.out.print(\"|\"); \n           if (row == 0){  \n              int noRow = 1; \n              for (int i = 0; i < 7 - (7 - startingDay + 1); i++) { \n                 for (int k = 0; k < SIZE- 1; k++){ \n                    System.out.print(\" \"); \n                 }\n                 System.out.print(\"|\"); \n              }\n              for (int j = 0; j < 7 - startingDay + 1; j++) { \n                 System.out.print(\" \" + noRow +\"  \"); \n                 int numLength = (noRow + \"\").length(); \n                 for (int k = 0; k < SIZE - numLength - 3; k++) { \n                    if(noRow == day) { \n                       System.out.print(\"*\"); \n                }   else { \n                       System.out.print(\" \"); \n                }\n            }\n            System.out.print(\"|\"); \n            noRow++;  \n         }\n      }  else {\n           int noRow = row * 7 - startingDay + 2; \n           for (int no = 1; no <= 7; no++){ \n              int numLength = 0; \n              if (noRow <= maxDaysInMonth){ \n                 System.out.print (noRow); \n                 numLength = (noRow + \"\").length(); \n            }  else {\n               numLength = 0; \n            }  for (int i = 0; i < SIZE - numLength - 1; i++) {\n                  if (noRow == day && noRow <= maxDaysInMonth) { \n                     System.out.print(\"*\"); \n              }   else {\n                  System.out.print(\" \"); \n              }\n           }\n           System.out.print(\"|\"); \n           noRow++; \n        }\n    }\n     System.out.println(); \n     for (int line = 1; line <= SIZE / 3; line++){\n        System.out.print(\"|\"); \n        for (int bar = 1; bar <= 7; bar++){ \n           for (int space = 1; space <= SIZE - 1; space++){ \n              System.out.print(\" \"); \n           }\n           System.out.print(\"|\"); \n        }\n        System.out.println(); \n     }\n   }\n      public static void equal(){ \n         for (int equal = 1; equal <= SIZE * 7; equal++){ \n            System.out.print(\"=\"); \n         }\n      }   \n      public static int monthFromDate (String date){ \n         String x = date.substring (0, date. indexOf(\"/\")); \n         return Integer.parseInt(x); \n      }\n      public static int dayFromDate (String date){ \n         String x = date.substring ((date.indexOf (\"/\")+1)); \n         return Integer.parseInt (x); \n      }\n      public static void displayDate (int month, int day){ \n         System.out.println (\"Month: \" + month); \n         System.out.println (\"Day: \" + day); \n      }\n      public static int mDaysInMonth (int month) { \n         if (month == 4 || month == 6 || month == 9 || month == 11){ \n            return 30;\n         }  else if (month == 2){  \n               return 28; \n         }  else {\n               return 31; \n         }\n      }\n      public static int mstartDay (int month){ \n         int day = 2; \n         for (int i = 1; i < month; i++) {\n            day = (day + mDaysInMonth (i) % 7) % 7; \n         }\n         if (day == 0){ \n            day = 7; \n         }\n         return day; \n         }\n         public static void loadEventsFromFile (String filename) throws FileNotFoundException { \n            eventArray = new String [12][]; \n            for(int i = 0; i < 12; i++){ \n               eventArray[i] = new String[mDaysInMonth (i)]; \n            }\n            Scanner input = new Scanner (new File (filename)); \n            while (input.hasNext()){\n               String date = input.next(); \n               String event = input.next(); \n               int day = dayFromDate (date); \n               int month = monthFromDate (date); \n               eventArray [month - 1] [day - 1] = event; \n               }\n            }\n         }",
			"settings":
			{
				"buffer_size": 8988,
				"line_ending": "Unix",
				"name": "import java.io.*;"
			}
		},
		{
			"contents": "import java.util.*;\nimport java.io.*;\nimport java.text.*;\n\npublic class DNA {\n   //Collection of static intergers used for calculating file output\n    public static final int MNC = 5;                \n   public static final double CG = 30.0;            \n   public static final int UN = 4;          \n   public static final int NPC = 3; \n\n        public static void main(String[] args) throws FileNotFoundException {\n        String inputText = input();\n        String outputText = output();\n        Scanner DNA = new Scanner(new File(inputText));\n        PrintStream out =  new PrintStream(new File(outputText));\n        while(DNA.hasNextLine()) { \n            name(DNA.nextLine(), out); \n            String sequenceDNA = sequence(DNA.nextLine(), out); \n            int[] nuc_Count = nuc_Count(sequenceDNA, out);  \n            double[] percentages = masses(nuc_Count, out);                                                                          \n            String codonList = groupCodons(sequenceDNA, out); \n            proteinTest(codonList, percentages, out); \n        }\n    }\n       //User input method\n        public static String input() throws FileNotFoundException {\n        System.out.println(\"This program reports information about DNA\");\n        System.out.println(\"nucleotides sequences that may encode proteins.\");\n        System.out.print(\"Input file name? \");\n        Scanner input = new Scanner(System.in); \n        String text = (input.next());\n        return text;\n    }\n       //Program creates a text file where output data is stored with the user creating a name\n        public static String output() {\n        System.out.print(\"Output file name? \");\n        Scanner output = new Scanner(System.in); \n        String text = (output.next());\n        return text;\n    }\n    //Region print method\n    public static void name(String name, PrintStream out) { \n        out.println(\"Region Name: \" + name);\n    }\n    //Nucleotides print method calling algorithm as well\n    public static String sequence(String sequenceDNA, PrintStream out) {\n        sequenceDNA = sequenceDNA.toUpperCase();\n        out.println(\"Nucleotides: \" + sequenceDNA);\n        return sequenceDNA; \n    }\n    //Algorithm for nucleotides\n    public static int[] nuc_Count(String sequenceDNA, PrintStream out) throws FileNotFoundException {\n        int[] counts = new int[UN + 1]; \n        char[] codons = {'A', 'C', 'G', 'T', '-'};\n        for(int i = 0; i < sequenceDNA.length(); i++) {\n            char c = sequenceDNA.charAt(i);\n            for(int j = 0; j < codons.length; j++) {\n                if(c == codons[j]) {\n                    counts[j]++;\n                }\n            }\n        }\n        int[] counts_Short = Arrays.copyOf(counts, 4); \n        out.println(\"Nuc. Counts: \" + Arrays.toString(counts_Short));\n        return counts;\n    }\n       //Algorith for mass\n        public static double[] masses(int[] nuc_Count, PrintStream out) throws FileNotFoundException {\n        double[] masses_Constant = {135.128, 111.103, 151.128, 125.107, 100.000}; //constant masses for \n        double[] masses_Nuc = new double[5];\n        double totalMass = 0;\n        for(int i = 0; i < 5; i++) { \n            masses_Nuc[i] = nuc_Count[i] * masses_Constant[i];\n            totalMass += masses_Nuc[i];\n        }       \n        \n        \n        double[] percentages = convert_Percentage(masses_Nuc, totalMass); \n        double[] percentages2 = Arrays.copyOf(percentages, 4); \n        out.print(\"Total Mass%: \" + Arrays.toString(percentages2) + \" of \");\n        out.printf(\"%.1f\", totalMass);\n        out.println();\n        return percentages; \n    }\n    //Formula for making intergers percent\n    public static double[] convert_Percentage(double[] masses_Nuc, double totalMass) throws FileNotFoundException {\n        double[] percentages = new double[5];\n        for(int i = 0; i <=4; i++) {\n            percentages[i] = Math.round((masses_Nuc[i] / totalMass * 100) * 10.0) / 10.0;\n        }\n        return percentages; \n    }\n    //Algorithm for codons + print method\n    public static String groupCodons(String sequenceDNA, PrintStream out) throws FileNotFoundException {\n        String sequenceDNA2 = sequenceDNA.replace(\"-\",\"\");\n        int length = sequenceDNA2.length() / NPC;\n        String[] codons = new String[length];\n        int j = 1; \n        for(int i = 0; i <= sequenceDNA2.length() - NPC; i = i + NPC) {\n            String codon = sequenceDNA2.substring(i, NPC * j);\n            codons[j - 1] = codon;\n            j++;       \n      } \n        String codonList = Arrays.toString(codons);\n        out.println(\"Codons List: \" + codonList);\n        return codonList; \n    }\n    //Method for checking if protien designation is valid\n    public static void proteinTest(String codonList, double[] percentages, PrintStream out) {\n            if (startTest(codonList) \n            && stopTest(codonList) \n            && mNCTest(codonList) \n            && percentageTest(percentages)) { \n                out.println(\"Is Protein?: YES\");\n        } else {\n            out.println(\"Is Protein?: NO\");\n        }\n        out.println(); \n    }\n    //start method\n    public static boolean startTest(String codonList) {\n        return(codonList.substring(1, 4).equals(\"ATG\"));\n    }\n    //stop method\n    public static boolean stopTest(String codonList) {\n        String EndC  = codonList.substring(codonList.length() - 4, codonList.length() - 1);\n      return (EndC.equals(\"TAA\") || EndC.equals(\"TAG\") || EndC.equals(\"TGA\"));\n    }\n    \n    public static boolean mNCTest(String codonList) {\n        return(codonList.charAt(19) == ',');\n    }\n    \n    public static boolean percentageTest(double[] percentages) {\n        return(percentages[1] + percentages[2] >= 30.0);\n    }\n}",
			"settings":
			{
				"buffer_size": 5763,
				"line_ending": "Unix",
				"name": "import java.util.*;"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAA9BYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABxAAAALy9SZWlkIE1vcmluCi8vTGFiIDYgRE5BCi8vUFJPR1JBTSBSRUFEUyBBTiBJTlBVVCBGSUxFIEFORCBESVNQTEFZUyBERVRBSUxTIE9GIENFUlRBSU4gR0VORVMKLy9EZWNlbWJlciAxMCAyMDE5Cgo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "assignments/week8/lab_6/dna.txt",
			"settings":
			{
				"buffer_size": 532,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "   public static final int MNC = 5;                \n   public static final double CG = 30.0;            \n   public static final int UN = 4;          \n   public static final int NPC = 3; ",
			"settings":
			{
				"buffer_size": 186,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAuwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "   "
					},
					"AwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "assignments/week8/lab_6/ecoli.txt",
			"settings":
			{
				"buffer_size": 20438,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++ & C Single File Builder - Minghang Yang/C++ Builder-Minghang Yang.sublime-build",
					""
				],
				[
					"Packages/C++ & C Single File Builder - Minghang Yang/C++ Builder-Minghang Yang.sublime-build",
					"Run"
				],
				[
					"Packages/C++ & C Single File Builder - Minghang Yang/C++ Builder-Minghang Yang.sublime-build",
					"Build and Run"
				]
			],
			[
				"Packages/C++ & C Single File Builder - Minghang Yang/C++ Builder-Minghang Yang.sublime-build",
				"Build and Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++11/C++11.sublime-build",
					""
				],
				[
					"Packages/C++11/C++11.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++11/C++11.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/User/C++.sublime-build",
					""
				],
				[
					"Packages/User/C++.sublime-build",
					"Run in Terminal"
				]
			],
			[
				"Packages/User/C++.sublime-build",
				"Run in Terminal"
			]
		],
		[
			[
				[
					"Packages/User/C++14.sublime-build",
					""
				],
				[
					"Packages/User/C++14.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/C++14.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Disable Package"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"debug",
				"Package Control: Enable Debug Mode"
			],
			[
				"book",
				"SublimeBookmarks: Show All Bookmarks "
			],
			[
				"clan",
				"Clang Format: Format Selection"
			],
			[
				"lint",
				"SublimeLinter: Show All Errors"
			],
			[
				"c++",
				"Set Syntax: C++11"
			],
			[
				"cla",
				"Clang Format: Format Selection"
			],
			[
				"clang",
				"Clang Format: Format Selection"
			],
			[
				"markdown",
				"Markdown Preview: Preview in Browser"
			],
			[
				"sublimerepl",
				"SublimeLinter: Reload SublimeLinter and its Plugins"
			],
			[
				"py",
				"Pretty Print: Format (Pretty Print) Python code"
			],
			[
				"cach",
				"requirements.txt: Clear Cache"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"packag",
				"Package Control: Install Local Dependency"
			],
			[
				"python",
				"Pretty Print: Format (Pretty Print) Python code"
			],
			[
				"package",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 329.0,
		"history":
		[
			"import logging; log = logging.getLogger(\"test\"); log.debug(\"this is debug\"); log.info(\"this is info\")",
			"clear()",
			"clear"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week8",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week8/lab_6"
	],
	"file_history":
	[
		"/home/frankzappasmustache/VirtualBox VMs/Windows 10/Windows 10.vbox",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week7/lab_5/DMMadLibs.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week7/lab_5/clothesout.txt",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week7/lab_5/simpleout.txt",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week7/lab_5/simple.txt",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/lab_4/DMGuessingGame.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/assignment_2/DMCalendarP2.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week7/lab_5/clothes.txt",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week7/lab_5/simpleout",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week7/lab_5/MadLibs.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/assignment_1/DMCalendar.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/Assignments/Assignment_2_Calendar_Part_2/CalendarSample.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/WordWrapDos.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/LeetSpeak.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/leetSpeak.txt",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/regularSpeak.txt",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/CoinFlip.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/flips.txt",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/StripHTMLTags.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/frankzappasmustache_github_io.html",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/WordWrap.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/NegativeSum.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/outputWords.txt",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/words.txt",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/CollapseSpaces.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/negatives_2.txt",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/exercises/negatives_1.txt",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/exercises/CircleArea.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/self_check/chapter3.md",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week6/self_check/chapter6.md",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/lab_3/CafeWall.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/assignment_1/DMCalendar2.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/lab_3/DMDoodle.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/exercises/QuadraticEquations.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/exercises/ScientificExponent.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/exercises/VolumeSphere.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/exercises/VerticalString.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/exercises/FirstNameLast.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/exercises/SquarePrinter.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/exercises/TriAngles.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week3/lab_2/DMPayroll.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/lab_3/DrawingPanel.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/code-files/ch12/Board.java",
		"/tmp/mozilla_frankzappasmustache0/DrawingPanel-1.java",
		"/tmp/mozilla_frankzappasmustache0/DrawingPanel.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week2/exercises/DisplacementEquation.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week2/lab_1/DMBusinessReport.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/lab_3/DMDrawingPanel.java",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week4/self_check/chapter5.md",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week5/assignment_1/Assignment1_Calendar.md",
		"/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week3/self_check/chapter4.md",
		"/home/frankzappasmustache/.config/sublime-text-3/Packages/User/RunJava.sublime-build",
		"/home/frankzappasmustache/Documents/jGRASP.desktop.bak",
		"/home/frankzappasmustache/Desktop/jGRASP.desktop",
		"/home/frankzappasmustache/Programs/VMware-Workstation-Full-16.0.0-16894299.x86_64.bundle",
		"/home/frankzappasmustache/Untitled.bjKqAo",
		"/home/frankzappasmustache/code/courses/IT121_Python/assignments/Lab_8_Employee_Classes/manager.py",
		"/home/frankzappasmustache/code/courses/IT121_Python/assignments/Lab_8_Employee_Classes/whiteCouncil.py",
		"/home/frankzappasmustache/code/courses/IT121_Python/assignments/Lab_8_Employee_Classes/employee.py",
		"/home/frankzappasmustache/code/courses/IT121_Python/assignments/Lab_8_Employee_Classes/fellowShip.py",
		"/home/frankzappasmustache/code/courses/tests_examples/My-scripts/Kieran Python IT121 Lab 8 Employee Classes.py",
		"/home/frankzappasmustache/pylint.rc",
		"/home/frankzappasmustache/.config/sublime-text-3/Packages/User/Pylinter.sublime-settings",
		"/home/frankzappasmustache/.config/sublime-text-3/Packages/Pylinter/Pylinter.sublime-settings",
		"/home/frankzappasmustache/code/courses/IT121_Python/assignments/Lab_7_Functional_Shapes/functionalShapes.py",
		"/home/frankzappasmustache/code/courses/IT121_Python/assignments/Lab_8_Employee_Classes/donCorlione.py",
		"/home/frankzappasmustache/code/courses/employee.py",
		"/home/frankzappasmustache/code/courses/IT121_Python/.gitignore",
		"/home/frankzappasmustache/Documents/Courses/IT 121 - Introduction to Programming/Documents/Book/Full_Book_Text.txt",
		"/home/frankzappasmustache/Documents/gcinn_nmap_scan.txt",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_7_sieveOfEratosthenes/sieveOfEratosthenes.sublime-project",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_7_sieveOfEratosthenes/sieveOfEratosthenes.h",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_7_sieveOfEratosthenes/sieveOfEratosthenes.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 07 Exercises/Ex 7.29/main.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 07 Exercises/Ex 7.29/TheSieveofEratosthenes.cpp",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_6a_parkingCharges/parkingCharges.h",
		"/home/frankzappasmustache/code/courses/tests_examples/playground/cpp-lang/algo/sedgewick/ch03/exr_3_13/eratosthenessieve.h",
		"/home/frankzappasmustache/code/courses/tests_examples/playground/cpp-lang/algo/sedgewick/ch03/exr_3_13/eratosthenessieve.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 07 Exercises/Ex 7.29/TheSieveofEratosthenes.hpp",
		"/home/frankzappasmustache/.xbindkeysrc",
		"/home/frankzappasmustache/.xbindkeysrc:",
		"/home/frankzappasmustache/code/courses/sieveOfEratosthenes_backup.cpp",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_8_tortiseAndHare/tortiseAndHare.cpp",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_8_tortiseAndHare/tortiseAndHare.md",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 08 Exercises/Ex 8.12/TortoiseAndHare.cpp",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_8_tortiseAndHare/tortiseAndHare.h",
		"/home/frankzappasmustache/code/courses/tests_examples/Assignment3/i.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 09 Exercises/Ex 9.6/RationalClass.hpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 09 Exercises/Ex 9.6/RationalClass.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 08 Exercises/Ex 8.12/main.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 08 Exercises/Ex 8.12/TortoiseAndHare.hpp",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_10_Account_Inheritance/accountInheritance.md",
		"/home/frankzappasmustache/code/courses/tests_examples/My-scripts/Kieran C++ CS131 Lab 08 - Sorting with Arrays.cpp",
		"/home/frankzappasmustache/code/courses/test1.cpp",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_6b_recursiveExponentiation/recursiveExponentiation.h",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_6b_recursiveExponentiation/recursiveExponentiation.cpp",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_6a_parkingCharges/parkingCharges.cpp",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_5a_smallestValue/avgOfIntegers.h",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_5a_smallestValue/avgOfIntegers.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel/Chapter_07/exercises/7.27/src/main.cpp",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_9_rationalClass/rational.h",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_9_rationalClass/rational.cpp",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_9_rationalClass/rational.md",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_5b_PeterMinuitProblem/PeterMinuitProblem.md",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_7_sieveOfEratosthenes/sieveOfEratosthenes.md",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_6a_parkingCharges/parkingCharges.md",
		"/home/frankzappasmustache/code/courses/tests_examples/Assignment-3/5.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/C-class/DL_A6_C3_p20.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/My-scripts/Kieran C++ CS132 Lab 02.1 - Classes - Basics.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/My-scripts/Kieran C++ CS131 Lab 06 - Recursion - Binary conversion.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 06 Exercises/Ex 6.36/RecursiveExponentiation",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 06 Exercises/Ex 6.36/main.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 06 Exercises/Ex 6.36/RecursiveExponentiation.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 06 Exercises/Ex 6.36/RecursiveExponentiation.hpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel/Chapter_06/exercises/6.36/src/main.cpp",
		"/home/frankzappasmustache/.config/sublime-text-3/Packages/User/CppBuilder.sublime-settings",
		"/home/frankzappasmustache/code/courses/CS131_CPP/CS131_CPP_laptop.sublime-project",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_3a_heartRate/HeartRates.h",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_3a_heartRate/HeartRates.cpp",
		"/home/frankzappasmustache/code/courses/CS131_CPP/assignments/Lab_5b_PeterMinuitProblem/peterMinuit.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel/Chapter_06/exercises/6.18/.vscode/tasks.json",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 06 Exercises/Ex 6.18/Exponentiation.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 06 Exercises/Ex 6.18/Exponentiation.hpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 06 Exercises/Ex 6.18/main.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel/Chapter_06/exercises/6.18/.vscode/launch.json",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 06 Exercises/Ex 6.12/main.cpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 06 Exercises/Ex 6.12/ParkingCharges.hpp",
		"/home/frankzappasmustache/code/courses/tests_examples/Deitel_Cplusplus_Practice/Chapter 06 Exercises/Ex 6.12/ParkingCharges.cpp"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 146.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"copyArea",
			"background",
			"setColor",
			"background",
			"nPoints",
			"draw",
			"setColor",
			"oval",
			"circle",
			"background",
			"super().__init__(self.department)"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "assignments/week8/assignment_3/DMCalendarP3.java",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11555,
						"regions":
						{
							"better_bookmarks":
							{
								"flags": 144,
								"icon": "Packages/Theme - Default/common/bookmark.png",
								"regions":
								[
								],
								"scope": "string"
							}
						},
						"selection":
						[
							[
								394,
								317
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								}
							],
							"git_gutter_is_enabled": true,
							"open_with_edit": true,
							"syntax": "Packages/Java/Java.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "assignments/week8/lab_6/DMDNA.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4561,
						"regions":
						{
							"better_bookmarks":
							{
								"flags": 144,
								"icon": "Packages/Theme - Default/common/bookmark.png",
								"regions":
								[
								],
								"scope": "string"
							}
						},
						"selection":
						[
							[
								3692,
								3692
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								}
							],
							"git_gutter_is_enabled": true,
							"open_with_edit": true,
							"syntax": "Packages/Java/Java.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1479.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "assignments/week7/lab_5/DMMadLibs.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7667,
						"regions":
						{
							"better_bookmarks":
							{
								"flags": 144,
								"icon": "Packages/Theme - Default/common/bookmark.png",
								"regions":
								[
								],
								"scope": "string"
							}
						},
						"selection":
						[
							[
								2,
								2
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								}
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Java/Java.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "assignments/week6/assignment_2/DMCalendarP2.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11142,
						"regions":
						{
							"better_bookmarks":
							{
								"flags": 144,
								"icon": "Packages/Theme - Default/common/bookmark.png",
								"regions":
								[
								],
								"scope": "string"
							}
						},
						"selection":
						[
							[
								11142,
								11142
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								}
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Java/Java.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1051.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10320,
						"regions":
						{
						},
						"selection":
						[
							[
								603,
								603
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								}
							],
							"auto_name": "import java.io.*;",
							"default_dir": "/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week8/assignment_3",
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Java/Java.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "assignments/week8/assignment_3/calendarEvents.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
							"better_bookmarks":
							{
								"flags": 144,
								"icon": "Packages/Theme - Default/common/bookmark.png",
								"regions":
								[
								],
								"scope": "string"
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								}
							],
							"git_gutter_is_enabled": true,
							"open_with_edit": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8971,
						"regions":
						{
						},
						"selection":
						[
							[
								8619,
								8619
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								}
							],
							"auto_name": "import java.io.*;",
							"default_dir": "/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week8/assignment_3",
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Java/Java.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8988,
						"regions":
						{
						},
						"selection":
						[
							[
								8944,
								8944
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								}
							],
							"auto_name": "import java.io.*;",
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Java/Java.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5763,
						"regions":
						{
						},
						"selection":
						[
							[
								539,
								539
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								}
							],
							"auto_name": "import java.util.*;",
							"default_dir": "/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week8/lab_6",
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Java/Java.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 120.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "assignments/week8/lab_6/dna.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 532,
						"regions":
						{
							"better_bookmarks":
							{
								"flags": 144,
								"icon": "Packages/Theme - Default/common/bookmark.png",
								"regions":
								[
								],
								"scope": "string"
							}
						},
						"selection":
						[
							[
								204,
								204
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								}
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 186,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								33
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								}
							],
							"default_dir": "/home/frankzappasmustache/OneDrive/Documents/CS_140_Java/code/CS140_JAVA/assignments/week8/lab_6",
							"git_gutter_is_enabled": false,
							"syntax": "Packages/Java/Java.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "assignments/week8/lab_6/ecoli.txt",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20438,
						"regions":
						{
							"better_bookmarks":
							{
								"flags": 144,
								"icon": "Packages/Theme - Default/common/bookmark.png",
								"regions":
								[
								],
								"scope": "string"
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".>:",
									"selector": "source.c++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>:",
									"selector": "source.c - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc++ - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.objc - string - comment - constant.numeric"
								},
								{
									"characters": ".>: ",
									"selector": "source.cuda-c++ - string - comment - constant.numeric"
								}
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 3162.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 53.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.CppBuilder":
	{
		"height": 178.0
	},
	"output.Debugger":
	{
		"height": 266.0
	},
	"output.ECC":
	{
		"height": 144.0
	},
	"output.SublimeLinter":
	{
		"height": 178.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 253.0
	},
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.diagnostics":
	{
		"height": 130.0
	},
	"output.exec":
	{
		"height": 265.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.help":
	{
		"height": 144.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/C++ & C Single File Builder - Minghang Yang/C++ Builder-Minghang Yang.sublime-build",
	"project": "CS_140_Java.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 224.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
